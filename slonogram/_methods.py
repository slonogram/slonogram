# This file is automatically generated, do not edit it directly
# version: Bot API 6.9 (September 22, 2023)
# generated at: 2023-12-15 08:51:45.162886
from __future__ import annotations
from slonogram.session import Session
from slonogram.utils import dump_json
from adaptix import Retort
from slonogram.schemas import (
    ForceReply,
    GameHighScore,
    InputSticker,
    InlineQueryResult,
    ShippingOption,
    ChatAdministratorRights,
    InputMediaVideo,
    BotCommandScope,
    InlineQueryResultsButton,
    MessageEntity,
    InputMediaPhoto,
    InputMediaDocument,
    BotDescription,
    ForumTopic,
    BotCommand,
    MessageId,
    BotShortDescription,
    ChatInviteLink,
    StickerSet,
    Message,
    Update,
    File,
    UserProfilePhotos,
    User,
    ReplyKeyboardMarkup,
    Chat,
    PassportElementError,
    Sticker,
    MaskPosition,
    SentWebAppMessage,
    Poll,
    ChatMember,
    BotName,
    InputMedia,
    WebhookInfo,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
    MenuButton,
    LabeledPrice,
    InputMediaAudio,
    ChatPermissions,
)
from typing import Any, BinaryIO
from io import IOBase


class _Methods:
    __slots__ = ("_session", "_retort")

    def __init__(self, retort: Retort, session: Session) -> None:
        self._retort = retort
        self._session = session

    async def get_updates(
        self,
        offset: int | None = None,
        limit: int | None = None,
        timeout: int | None = None,
        allowed_updates: list[str] | None = None,
    ) -> list[Update]:
        """Use this method to receive incoming updates using long polling (wiki). Returns an Array of Update objects.

        Source: https://core.telegram.org/bots/api#getupdates

        :param offset: Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is called with an offset higher than its update_id. The negative offset can be specified to retrieve updates starting from -offset update from the end of the updates queue. All previous updates will be forgotten.
        :param limit: Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
        :param timeout: Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
        :param allowed_updates: A JSON-serialized list of the update types you want your bot to receive. For example, specify ["message", "edited_channel_post", "callback_query"] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except chat_member (default). If not specified, the previous setting will be used. Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Array of Update
        :rtype: list[Update]
        """
        args: dict[str, Any] = {}
        if offset is not None:
            args["offset"] = offset
        if limit is not None:
            args["limit"] = limit
        if timeout is not None:
            args["timeout"] = timeout
        if allowed_updates is not None:
            args["allowed_updates"] = dump_json(
                self._retort.dump(allowed_updates, list[str])
            )
        return self._retort.load(
            await self._session.call_method("getUpdates", args), list[Update]
        )

    async def set_webhook(
        self,
        url: str,
        certificate: BinaryIO | None = None,
        ip_address: str | None = None,
        max_connections: int | None = None,
        allowed_updates: list[str] | None = None,
        drop_pending_updates: bool | None = None,
        secret_token: str | None = None,
    ) -> bool:
        """Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized Update. In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns True on success.
        If you'd like to make sure that the webhook was set by you, you can specify secret data in the parameter secret_token. If specified, the request will contain a header "X-Telegram-Bot-Api-Secret-Token" with the secret token as content.

        Source: https://core.telegram.org/bots/api#setwebhook

        :param url: HTTPS URL to send updates to. Use an empty string to remove webhook integration
        :param certificate: Upload your public key certificate so that the root certificate in use can be checked. See our self-signed guide for details.
        :param ip_address: The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS
        :param max_connections: The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to 40. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput.
        :param allowed_updates: A JSON-serialized list of the update types you want your bot to receive. For example, specify ["message", "edited_channel_post", "callback_query"] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except chat_member (default). If not specified, the previous setting will be used. Please note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.
        :param drop_pending_updates: Pass True to drop all pending updates
        :param secret_token: A secret token to be sent in a header "X-Telegram-Bot-Api-Secret-Token" in every webhook request, 1-256 characters. Only characters A-Z, a-z, 0-9, _ and - are allowed. The header is useful to ensure that the request comes from a webhook set by you.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"url": url}
        files: dict[str, IOBase] = {}
        if isinstance(certificate, IOBase):
            files["certificate"] = certificate
        if ip_address is not None:
            args["ip_address"] = ip_address
        if max_connections is not None:
            args["max_connections"] = max_connections
        if allowed_updates is not None:
            args["allowed_updates"] = dump_json(
                self._retort.dump(allowed_updates, list[str])
            )
        if drop_pending_updates is not None:
            args["drop_pending_updates"] = drop_pending_updates
        if secret_token is not None:
            args["secret_token"] = secret_token
        return self._retort.load(
            await self._session.call_method("setWebhook", args), bool
        )

    async def delete_webhook(
        self,
        drop_pending_updates: bool | None = None,
    ) -> bool:
        """Use this method to remove webhook integration if you decide to switch back to getUpdates. Returns True on success.

        Source: https://core.telegram.org/bots/api#deletewebhook

        :param drop_pending_updates: Pass True to drop all pending updates
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {}
        if drop_pending_updates is not None:
            args["drop_pending_updates"] = drop_pending_updates
        return self._retort.load(
            await self._session.call_method("deleteWebhook", args), bool
        )

    async def get_webhook_info(
        self,
    ) -> WebhookInfo:
        """Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using getUpdates, will return an object with the url field empty.

        Source: https://core.telegram.org/bots/api#getwebhookinfo


        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: WebhookInfo
        :rtype: WebhookInfo
        """
        args: dict[str, Any] = {}
        return self._retort.load(
            await self._session.call_method("getWebhookInfo", args), WebhookInfo
        )

    async def get_me(
        self,
    ) -> User:
        """A simple method for testing your bot's authentication token. Requires no parameters. Returns basic information about the bot in form of a User object.

        Source: https://core.telegram.org/bots/api#getme


        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: User
        :rtype: User
        """
        args: dict[str, Any] = {}
        return self._retort.load(await self._session.call_method("getMe", args), User)

    async def log_out(
        self,
    ) -> bool:
        """Use this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns True on success. Requires no parameters.

        Source: https://core.telegram.org/bots/api#logout


        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {}
        return self._retort.load(await self._session.call_method("logOut", args), bool)

    async def close(
        self,
    ) -> bool:
        """Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns True on success. Requires no parameters.

        Source: https://core.telegram.org/bots/api#close


        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {}
        return self._retort.load(await self._session.call_method("close", args), bool)

    async def send_message(
        self,
        chat_id: int | str,
        text: str,
        message_thread_id: int | None = None,
        parse_mode: str | None = None,
        entities: list[MessageEntity] | None = None,
        disable_web_page_preview: bool | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
        reply_markup: InlineKeyboardMarkup
        | ReplyKeyboardMarkup
        | ReplyKeyboardRemove
        | ForceReply
        | None = None,
    ) -> Message:
        """Use this method to send text messages. On success, the sent Message is returned.

        Source: https://core.telegram.org/bots/api#sendmessage

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param text: Text of the message to be sent, 1-4096 characters after entities parsing
        :param parse_mode: Mode for parsing entities in the message text. See formatting options for more details.
        :param entities: A JSON-serialized list of special entities that appear in message text, which can be specified instead of parse_mode
        :param disable_web_page_preview: Disables link previews for links in this message
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent message from forwarding and saving
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :param reply_markup: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message
        :rtype: Message
        """
        args: dict[str, Any] = {"chat_id": chat_id, "text": text}
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if parse_mode is not None:
            args["parse_mode"] = parse_mode
        if entities is not None:
            args["entities"] = dump_json(
                self._retort.dump(entities, list[MessageEntity])
            )
        if disable_web_page_preview is not None:
            args["disable_web_page_preview"] = disable_web_page_preview
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        if isinstance(
            reply_markup,
            (
                InlineKeyboardMarkup,
                ReplyKeyboardMarkup,
                ReplyKeyboardRemove,
                ForceReply,
            ),
        ):
            args["reply_markup"] = dump_json(
                self._retort.dump(
                    reply_markup,
                    InlineKeyboardMarkup
                    | ReplyKeyboardMarkup
                    | ReplyKeyboardRemove
                    | ForceReply,
                )
            )
        return self._retort.load(
            await self._session.call_method("sendMessage", args), Message
        )

    async def forward_message(
        self,
        chat_id: int | str,
        from_chat_id: int | str,
        message_id: int,
        message_thread_id: int | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
    ) -> Message:
        """Use this method to forward messages of any kind. Service messages can't be forwarded. On success, the sent Message is returned.

        Source: https://core.telegram.org/bots/api#forwardmessage

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param from_chat_id: Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the forwarded message from forwarding and saving
        :param message_id: Message identifier in the chat specified in from_chat_id
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message
        :rtype: Message
        """
        args: dict[str, Any] = {
            "chat_id": chat_id,
            "from_chat_id": from_chat_id,
            "message_id": message_id,
        }
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        return self._retort.load(
            await self._session.call_method("forwardMessage", args), Message
        )

    async def copy_message(
        self,
        chat_id: int | str,
        from_chat_id: int | str,
        message_id: int,
        message_thread_id: int | None = None,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
        reply_markup: InlineKeyboardMarkup
        | ReplyKeyboardMarkup
        | ReplyKeyboardRemove
        | ForceReply
        | None = None,
    ) -> MessageId:
        """Use this method to copy messages of any kind. Service messages and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success.

        Source: https://core.telegram.org/bots/api#copymessage

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param from_chat_id: Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)
        :param message_id: Message identifier in the chat specified in from_chat_id
        :param caption: New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
        :param parse_mode: Mode for parsing entities in the new caption. See formatting options for more details.
        :param caption_entities: A JSON-serialized list of special entities that appear in the new caption, which can be specified instead of parse_mode
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent message from forwarding and saving
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :param reply_markup: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: MessageId
        :rtype: MessageId
        """
        args: dict[str, Any] = {
            "chat_id": chat_id,
            "from_chat_id": from_chat_id,
            "message_id": message_id,
        }
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if caption is not None:
            args["caption"] = caption
        if parse_mode is not None:
            args["parse_mode"] = parse_mode
        if caption_entities is not None:
            args["caption_entities"] = dump_json(
                self._retort.dump(caption_entities, list[MessageEntity])
            )
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        if isinstance(
            reply_markup,
            (
                InlineKeyboardMarkup,
                ReplyKeyboardMarkup,
                ReplyKeyboardRemove,
                ForceReply,
            ),
        ):
            args["reply_markup"] = dump_json(
                self._retort.dump(
                    reply_markup,
                    InlineKeyboardMarkup
                    | ReplyKeyboardMarkup
                    | ReplyKeyboardRemove
                    | ForceReply,
                )
            )
        return self._retort.load(
            await self._session.call_method("copyMessage", args), MessageId
        )

    async def send_photo(
        self,
        chat_id: int | str,
        photo: BinaryIO | str,
        message_thread_id: int | None = None,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        has_spoiler: bool | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
        reply_markup: InlineKeyboardMarkup
        | ReplyKeyboardMarkup
        | ReplyKeyboardRemove
        | ForceReply
        | None = None,
    ) -> Message:
        """Use this method to send photos. On success, the sent Message is returned.

        Source: https://core.telegram.org/bots/api#sendphoto

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param photo: Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
        :param caption: Photo caption (may also be used when resending photos by file_id), 0-1024 characters after entities parsing
        :param parse_mode: Mode for parsing entities in the photo caption. See formatting options for more details.
        :param caption_entities: A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
        :param has_spoiler: Pass True if the photo needs to be covered with a spoiler animation
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent message from forwarding and saving
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :param reply_markup: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message
        :rtype: Message
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        files: dict[str, IOBase] = {}
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if isinstance(photo, IOBase):
            files["photo"] = photo
        if caption is not None:
            args["caption"] = caption
        if parse_mode is not None:
            args["parse_mode"] = parse_mode
        if caption_entities is not None:
            args["caption_entities"] = dump_json(
                self._retort.dump(caption_entities, list[MessageEntity])
            )
        if has_spoiler is not None:
            args["has_spoiler"] = has_spoiler
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        if isinstance(
            reply_markup,
            (
                InlineKeyboardMarkup,
                ReplyKeyboardMarkup,
                ReplyKeyboardRemove,
                ForceReply,
            ),
        ):
            args["reply_markup"] = dump_json(
                self._retort.dump(
                    reply_markup,
                    InlineKeyboardMarkup
                    | ReplyKeyboardMarkup
                    | ReplyKeyboardRemove
                    | ForceReply,
                )
            )
        return self._retort.load(
            await self._session.call_method("sendPhoto", args), Message
        )

    async def send_audio(
        self,
        chat_id: int | str,
        audio: BinaryIO | str,
        message_thread_id: int | None = None,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        duration: int | None = None,
        performer: str | None = None,
        title: str | None = None,
        thumbnail: BinaryIO | str | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
        reply_markup: InlineKeyboardMarkup
        | ReplyKeyboardMarkup
        | ReplyKeyboardRemove
        | ForceReply
        | None = None,
    ) -> Message:
        """Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.
        For sending voice messages, use the sendVoice method instead.

        Source: https://core.telegram.org/bots/api#sendaudio

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param audio: Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
        :param caption: Audio caption, 0-1024 characters after entities parsing
        :param parse_mode: Mode for parsing entities in the audio caption. See formatting options for more details.
        :param caption_entities: A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
        :param duration: Duration of the audio in seconds
        :param performer: Performer
        :param title: Track name
        :param thumbnail: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent message from forwarding and saving
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :param reply_markup: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message
        :rtype: Message
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        files: dict[str, IOBase] = {}
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if isinstance(audio, IOBase):
            files["audio"] = audio
        if caption is not None:
            args["caption"] = caption
        if parse_mode is not None:
            args["parse_mode"] = parse_mode
        if caption_entities is not None:
            args["caption_entities"] = dump_json(
                self._retort.dump(caption_entities, list[MessageEntity])
            )
        if duration is not None:
            args["duration"] = duration
        if performer is not None:
            args["performer"] = performer
        if title is not None:
            args["title"] = title
        if isinstance(thumbnail, IOBase):
            files["thumbnail"] = thumbnail
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        if isinstance(
            reply_markup,
            (
                InlineKeyboardMarkup,
                ReplyKeyboardMarkup,
                ReplyKeyboardRemove,
                ForceReply,
            ),
        ):
            args["reply_markup"] = dump_json(
                self._retort.dump(
                    reply_markup,
                    InlineKeyboardMarkup
                    | ReplyKeyboardMarkup
                    | ReplyKeyboardRemove
                    | ForceReply,
                )
            )
        return self._retort.load(
            await self._session.call_method("sendAudio", args), Message
        )

    async def send_document(
        self,
        chat_id: int | str,
        document: BinaryIO | str,
        message_thread_id: int | None = None,
        thumbnail: BinaryIO | str | None = None,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        disable_content_type_detection: bool | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
        reply_markup: InlineKeyboardMarkup
        | ReplyKeyboardMarkup
        | ReplyKeyboardRemove
        | ForceReply
        | None = None,
    ) -> Message:
        """Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.

        Source: https://core.telegram.org/bots/api#senddocument

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param document: File to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
        :param thumbnail: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
        :param caption: Document caption (may also be used when resending documents by file_id), 0-1024 characters after entities parsing
        :param parse_mode: Mode for parsing entities in the document caption. See formatting options for more details.
        :param caption_entities: A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
        :param disable_content_type_detection: Disables automatic server-side content type detection for files uploaded using multipart/form-data
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent message from forwarding and saving
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :param reply_markup: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message
        :rtype: Message
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        files: dict[str, IOBase] = {}
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if isinstance(document, IOBase):
            files["document"] = document
        if isinstance(thumbnail, IOBase):
            files["thumbnail"] = thumbnail
        if caption is not None:
            args["caption"] = caption
        if parse_mode is not None:
            args["parse_mode"] = parse_mode
        if caption_entities is not None:
            args["caption_entities"] = dump_json(
                self._retort.dump(caption_entities, list[MessageEntity])
            )
        if disable_content_type_detection is not None:
            args["disable_content_type_detection"] = disable_content_type_detection
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        if isinstance(
            reply_markup,
            (
                InlineKeyboardMarkup,
                ReplyKeyboardMarkup,
                ReplyKeyboardRemove,
                ForceReply,
            ),
        ):
            args["reply_markup"] = dump_json(
                self._retort.dump(
                    reply_markup,
                    InlineKeyboardMarkup
                    | ReplyKeyboardMarkup
                    | ReplyKeyboardRemove
                    | ForceReply,
                )
            )
        return self._retort.load(
            await self._session.call_method("sendDocument", args), Message
        )

    async def send_video(
        self,
        chat_id: int | str,
        video: BinaryIO | str,
        message_thread_id: int | None = None,
        duration: int | None = None,
        width: int | None = None,
        height: int | None = None,
        thumbnail: BinaryIO | str | None = None,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        has_spoiler: bool | None = None,
        supports_streaming: bool | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
        reply_markup: InlineKeyboardMarkup
        | ReplyKeyboardMarkup
        | ReplyKeyboardRemove
        | ForceReply
        | None = None,
    ) -> Message:
        """Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.

        Source: https://core.telegram.org/bots/api#sendvideo

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param video: Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
        :param duration: Duration of sent video in seconds
        :param width: Video width
        :param height: Video height
        :param thumbnail: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
        :param caption: Video caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing
        :param parse_mode: Mode for parsing entities in the video caption. See formatting options for more details.
        :param caption_entities: A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
        :param has_spoiler: Pass True if the video needs to be covered with a spoiler animation
        :param supports_streaming: Pass True if the uploaded video is suitable for streaming
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent message from forwarding and saving
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :param reply_markup: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message
        :rtype: Message
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        files: dict[str, IOBase] = {}
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if isinstance(video, IOBase):
            files["video"] = video
        if duration is not None:
            args["duration"] = duration
        if width is not None:
            args["width"] = width
        if height is not None:
            args["height"] = height
        if isinstance(thumbnail, IOBase):
            files["thumbnail"] = thumbnail
        if caption is not None:
            args["caption"] = caption
        if parse_mode is not None:
            args["parse_mode"] = parse_mode
        if caption_entities is not None:
            args["caption_entities"] = dump_json(
                self._retort.dump(caption_entities, list[MessageEntity])
            )
        if has_spoiler is not None:
            args["has_spoiler"] = has_spoiler
        if supports_streaming is not None:
            args["supports_streaming"] = supports_streaming
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        if isinstance(
            reply_markup,
            (
                InlineKeyboardMarkup,
                ReplyKeyboardMarkup,
                ReplyKeyboardRemove,
                ForceReply,
            ),
        ):
            args["reply_markup"] = dump_json(
                self._retort.dump(
                    reply_markup,
                    InlineKeyboardMarkup
                    | ReplyKeyboardMarkup
                    | ReplyKeyboardRemove
                    | ForceReply,
                )
            )
        return self._retort.load(
            await self._session.call_method("sendVideo", args), Message
        )

    async def send_animation(
        self,
        chat_id: int | str,
        animation: BinaryIO | str,
        message_thread_id: int | None = None,
        duration: int | None = None,
        width: int | None = None,
        height: int | None = None,
        thumbnail: BinaryIO | str | None = None,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        has_spoiler: bool | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
        reply_markup: InlineKeyboardMarkup
        | ReplyKeyboardMarkup
        | ReplyKeyboardRemove
        | ForceReply
        | None = None,
    ) -> Message:
        """Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.

        Source: https://core.telegram.org/bots/api#sendanimation

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param animation: Animation to send. Pass a file_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
        :param duration: Duration of sent animation in seconds
        :param width: Animation width
        :param height: Animation height
        :param thumbnail: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
        :param caption: Animation caption (may also be used when resending animation by file_id), 0-1024 characters after entities parsing
        :param parse_mode: Mode for parsing entities in the animation caption. See formatting options for more details.
        :param caption_entities: A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
        :param has_spoiler: Pass True if the animation needs to be covered with a spoiler animation
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent message from forwarding and saving
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :param reply_markup: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message
        :rtype: Message
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        files: dict[str, IOBase] = {}
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if isinstance(animation, IOBase):
            files["animation"] = animation
        if duration is not None:
            args["duration"] = duration
        if width is not None:
            args["width"] = width
        if height is not None:
            args["height"] = height
        if isinstance(thumbnail, IOBase):
            files["thumbnail"] = thumbnail
        if caption is not None:
            args["caption"] = caption
        if parse_mode is not None:
            args["parse_mode"] = parse_mode
        if caption_entities is not None:
            args["caption_entities"] = dump_json(
                self._retort.dump(caption_entities, list[MessageEntity])
            )
        if has_spoiler is not None:
            args["has_spoiler"] = has_spoiler
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        if isinstance(
            reply_markup,
            (
                InlineKeyboardMarkup,
                ReplyKeyboardMarkup,
                ReplyKeyboardRemove,
                ForceReply,
            ),
        ):
            args["reply_markup"] = dump_json(
                self._retort.dump(
                    reply_markup,
                    InlineKeyboardMarkup
                    | ReplyKeyboardMarkup
                    | ReplyKeyboardRemove
                    | ForceReply,
                )
            )
        return self._retort.load(
            await self._session.call_method("sendAnimation", args), Message
        )

    async def send_voice(
        self,
        chat_id: int | str,
        voice: BinaryIO | str,
        message_thread_id: int | None = None,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        duration: int | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
        reply_markup: InlineKeyboardMarkup
        | ReplyKeyboardMarkup
        | ReplyKeyboardRemove
        | ForceReply
        | None = None,
    ) -> Message:
        """Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.

        Source: https://core.telegram.org/bots/api#sendvoice

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param voice: Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
        :param caption: Voice message caption, 0-1024 characters after entities parsing
        :param parse_mode: Mode for parsing entities in the voice message caption. See formatting options for more details.
        :param caption_entities: A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
        :param duration: Duration of the voice message in seconds
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent message from forwarding and saving
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :param reply_markup: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message
        :rtype: Message
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        files: dict[str, IOBase] = {}
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if isinstance(voice, IOBase):
            files["voice"] = voice
        if caption is not None:
            args["caption"] = caption
        if parse_mode is not None:
            args["parse_mode"] = parse_mode
        if caption_entities is not None:
            args["caption_entities"] = dump_json(
                self._retort.dump(caption_entities, list[MessageEntity])
            )
        if duration is not None:
            args["duration"] = duration
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        if isinstance(
            reply_markup,
            (
                InlineKeyboardMarkup,
                ReplyKeyboardMarkup,
                ReplyKeyboardRemove,
                ForceReply,
            ),
        ):
            args["reply_markup"] = dump_json(
                self._retort.dump(
                    reply_markup,
                    InlineKeyboardMarkup
                    | ReplyKeyboardMarkup
                    | ReplyKeyboardRemove
                    | ForceReply,
                )
            )
        return self._retort.load(
            await self._session.call_method("sendVoice", args), Message
        )

    async def send_video_note(
        self,
        chat_id: int | str,
        video_note: BinaryIO | str,
        message_thread_id: int | None = None,
        duration: int | None = None,
        length: int | None = None,
        thumbnail: BinaryIO | str | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
        reply_markup: InlineKeyboardMarkup
        | ReplyKeyboardMarkup
        | ReplyKeyboardRemove
        | ForceReply
        | None = None,
    ) -> Message:
        """As of v.4.0, Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned.

        Source: https://core.telegram.org/bots/api#sendvideonote

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param video_note: Video note to send. Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. More information on Sending Files: https://core.telegram.org/bots/api#sending-files. Sending video notes by a URL is currently unsupported
        :param duration: Duration of sent video in seconds
        :param length: Video width and height, i.e. diameter of the video message
        :param thumbnail: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent message from forwarding and saving
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :param reply_markup: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message
        :rtype: Message
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        files: dict[str, IOBase] = {}
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if isinstance(video_note, IOBase):
            files["video_note"] = video_note
        if duration is not None:
            args["duration"] = duration
        if length is not None:
            args["length"] = length
        if isinstance(thumbnail, IOBase):
            files["thumbnail"] = thumbnail
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        if isinstance(
            reply_markup,
            (
                InlineKeyboardMarkup,
                ReplyKeyboardMarkup,
                ReplyKeyboardRemove,
                ForceReply,
            ),
        ):
            args["reply_markup"] = dump_json(
                self._retort.dump(
                    reply_markup,
                    InlineKeyboardMarkup
                    | ReplyKeyboardMarkup
                    | ReplyKeyboardRemove
                    | ForceReply,
                )
            )
        return self._retort.load(
            await self._session.call_method("sendVideoNote", args), Message
        )

    async def send_media_group(
        self,
        chat_id: int | str,
        media: list[InputMediaAudio]
        | list[InputMediaDocument]
        | list[InputMediaPhoto]
        | list[InputMediaVideo],
        message_thread_id: int | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
    ) -> list[Message]:
        """Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of Messages that were sent is returned.

        Source: https://core.telegram.org/bots/api#sendmediagroup

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param media: A JSON-serialized array describing messages to be sent, must include 2-10 items
        :param disable_notification: Sends messages silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent messages from forwarding and saving
        :param reply_to_message_id: If the messages are a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Array of Message
        :rtype: list[Message]
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if isinstance(media, (list, list, list, list)):
            args["media"] = dump_json(
                self._retort.dump(
                    media,
                    list[InputMediaAudio]
                    | list[InputMediaDocument]
                    | list[InputMediaPhoto]
                    | list[InputMediaVideo],
                )
            )
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        return self._retort.load(
            await self._session.call_method("sendMediaGroup", args), list[Message]
        )

    async def send_location(
        self,
        chat_id: int | str,
        latitude: float,
        longitude: float,
        message_thread_id: int | None = None,
        horizontal_accuracy: float | None = None,
        live_period: int | None = None,
        heading: int | None = None,
        proximity_alert_radius: int | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
        reply_markup: InlineKeyboardMarkup
        | ReplyKeyboardMarkup
        | ReplyKeyboardRemove
        | ForceReply
        | None = None,
    ) -> Message:
        """Use this method to send point on the map. On success, the sent Message is returned.

        Source: https://core.telegram.org/bots/api#sendlocation

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param latitude: Latitude of the location
        :param longitude: Longitude of the location
        :param horizontal_accuracy: The radius of uncertainty for the location, measured in meters; 0-1500
        :param live_period: Period in seconds for which the location will be updated (see Live Locations, should be between 60 and 86400.
        :param heading: For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
        :param proximity_alert_radius: For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent message from forwarding and saving
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :param reply_markup: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message
        :rtype: Message
        """
        args: dict[str, Any] = {
            "chat_id": chat_id,
            "latitude": latitude,
            "longitude": longitude,
        }
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if horizontal_accuracy is not None:
            args["horizontal_accuracy"] = horizontal_accuracy
        if live_period is not None:
            args["live_period"] = live_period
        if heading is not None:
            args["heading"] = heading
        if proximity_alert_radius is not None:
            args["proximity_alert_radius"] = proximity_alert_radius
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        if isinstance(
            reply_markup,
            (
                InlineKeyboardMarkup,
                ReplyKeyboardMarkup,
                ReplyKeyboardRemove,
                ForceReply,
            ),
        ):
            args["reply_markup"] = dump_json(
                self._retort.dump(
                    reply_markup,
                    InlineKeyboardMarkup
                    | ReplyKeyboardMarkup
                    | ReplyKeyboardRemove
                    | ForceReply,
                )
            )
        return self._retort.load(
            await self._session.call_method("sendLocation", args), Message
        )

    async def send_venue(
        self,
        chat_id: int | str,
        latitude: float,
        longitude: float,
        title: str,
        address: str,
        message_thread_id: int | None = None,
        foursquare_id: str | None = None,
        foursquare_type: str | None = None,
        google_place_id: str | None = None,
        google_place_type: str | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
        reply_markup: InlineKeyboardMarkup
        | ReplyKeyboardMarkup
        | ReplyKeyboardRemove
        | ForceReply
        | None = None,
    ) -> Message:
        """Use this method to send information about a venue. On success, the sent Message is returned.

        Source: https://core.telegram.org/bots/api#sendvenue

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param latitude: Latitude of the venue
        :param longitude: Longitude of the venue
        :param title: Name of the venue
        :param address: Address of the venue
        :param foursquare_id: Foursquare identifier of the venue
        :param foursquare_type: Foursquare type of the venue, if known. (For example, "arts_entertainment/default", "arts_entertainment/aquarium" or "food/icecream".)
        :param google_place_id: Google Places identifier of the venue
        :param google_place_type: Google Places type of the venue. (See supported types.)
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent message from forwarding and saving
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :param reply_markup: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message
        :rtype: Message
        """
        args: dict[str, Any] = {
            "chat_id": chat_id,
            "latitude": latitude,
            "longitude": longitude,
            "title": title,
            "address": address,
        }
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if foursquare_id is not None:
            args["foursquare_id"] = foursquare_id
        if foursquare_type is not None:
            args["foursquare_type"] = foursquare_type
        if google_place_id is not None:
            args["google_place_id"] = google_place_id
        if google_place_type is not None:
            args["google_place_type"] = google_place_type
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        if isinstance(
            reply_markup,
            (
                InlineKeyboardMarkup,
                ReplyKeyboardMarkup,
                ReplyKeyboardRemove,
                ForceReply,
            ),
        ):
            args["reply_markup"] = dump_json(
                self._retort.dump(
                    reply_markup,
                    InlineKeyboardMarkup
                    | ReplyKeyboardMarkup
                    | ReplyKeyboardRemove
                    | ForceReply,
                )
            )
        return self._retort.load(
            await self._session.call_method("sendVenue", args), Message
        )

    async def send_contact(
        self,
        chat_id: int | str,
        phone_number: str,
        first_name: str,
        message_thread_id: int | None = None,
        last_name: str | None = None,
        vcard: str | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
        reply_markup: InlineKeyboardMarkup
        | ReplyKeyboardMarkup
        | ReplyKeyboardRemove
        | ForceReply
        | None = None,
    ) -> Message:
        """Use this method to send phone contacts. On success, the sent Message is returned.

        Source: https://core.telegram.org/bots/api#sendcontact

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param phone_number: Contact's phone number
        :param first_name: Contact's first name
        :param last_name: Contact's last name
        :param vcard: Additional data about the contact in the form of a vCard, 0-2048 bytes
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent message from forwarding and saving
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :param reply_markup: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message
        :rtype: Message
        """
        args: dict[str, Any] = {
            "chat_id": chat_id,
            "phone_number": phone_number,
            "first_name": first_name,
        }
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if last_name is not None:
            args["last_name"] = last_name
        if vcard is not None:
            args["vcard"] = vcard
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        if isinstance(
            reply_markup,
            (
                InlineKeyboardMarkup,
                ReplyKeyboardMarkup,
                ReplyKeyboardRemove,
                ForceReply,
            ),
        ):
            args["reply_markup"] = dump_json(
                self._retort.dump(
                    reply_markup,
                    InlineKeyboardMarkup
                    | ReplyKeyboardMarkup
                    | ReplyKeyboardRemove
                    | ForceReply,
                )
            )
        return self._retort.load(
            await self._session.call_method("sendContact", args), Message
        )

    async def send_poll(
        self,
        chat_id: int | str,
        question: str,
        options: list[str],
        message_thread_id: int | None = None,
        is_anonymous: bool | None = None,
        type: str | None = None,
        allows_multiple_answers: bool | None = None,
        correct_option_id: int | None = None,
        explanation: str | None = None,
        explanation_parse_mode: str | None = None,
        explanation_entities: list[MessageEntity] | None = None,
        open_period: int | None = None,
        close_date: int | None = None,
        is_closed: bool | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
        reply_markup: InlineKeyboardMarkup
        | ReplyKeyboardMarkup
        | ReplyKeyboardRemove
        | ForceReply
        | None = None,
    ) -> Message:
        """Use this method to send a native poll. On success, the sent Message is returned.

        Source: https://core.telegram.org/bots/api#sendpoll

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param question: Poll question, 1-300 characters
        :param options: A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
        :param is_anonymous: True, if the poll needs to be anonymous, defaults to True
        :param type: Poll type, "quiz" or "regular", defaults to "regular"
        :param allows_multiple_answers: True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to False
        :param correct_option_id: 0-based identifier of the correct answer option, required for polls in quiz mode
        :param explanation: Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
        :param explanation_parse_mode: Mode for parsing entities in the explanation. See formatting options for more details.
        :param explanation_entities: A JSON-serialized list of special entities that appear in the poll explanation, which can be specified instead of parse_mode
        :param open_period: Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close_date.
        :param close_date: Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with open_period.
        :param is_closed: Pass True if the poll needs to be immediately closed. This can be useful for poll preview.
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent message from forwarding and saving
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :param reply_markup: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message
        :rtype: Message
        """
        args: dict[str, Any] = {"chat_id": chat_id, "question": question}
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if options is not None:
            args["options"] = dump_json(self._retort.dump(options, list[str]))
        if is_anonymous is not None:
            args["is_anonymous"] = is_anonymous
        if type is not None:
            args["type"] = type
        if allows_multiple_answers is not None:
            args["allows_multiple_answers"] = allows_multiple_answers
        if correct_option_id is not None:
            args["correct_option_id"] = correct_option_id
        if explanation is not None:
            args["explanation"] = explanation
        if explanation_parse_mode is not None:
            args["explanation_parse_mode"] = explanation_parse_mode
        if explanation_entities is not None:
            args["explanation_entities"] = dump_json(
                self._retort.dump(explanation_entities, list[MessageEntity])
            )
        if open_period is not None:
            args["open_period"] = open_period
        if close_date is not None:
            args["close_date"] = close_date
        if is_closed is not None:
            args["is_closed"] = is_closed
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        if isinstance(
            reply_markup,
            (
                InlineKeyboardMarkup,
                ReplyKeyboardMarkup,
                ReplyKeyboardRemove,
                ForceReply,
            ),
        ):
            args["reply_markup"] = dump_json(
                self._retort.dump(
                    reply_markup,
                    InlineKeyboardMarkup
                    | ReplyKeyboardMarkup
                    | ReplyKeyboardRemove
                    | ForceReply,
                )
            )
        return self._retort.load(
            await self._session.call_method("sendPoll", args), Message
        )

    async def send_dice(
        self,
        chat_id: int | str,
        message_thread_id: int | None = None,
        emoji: str | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
        reply_markup: InlineKeyboardMarkup
        | ReplyKeyboardMarkup
        | ReplyKeyboardRemove
        | ForceReply
        | None = None,
    ) -> Message:
        """Use this method to send an animated emoji that will display a random value. On success, the sent Message is returned.

        Source: https://core.telegram.org/bots/api#senddice

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param emoji: Emoji on which the dice throw animation is based. Currently, must be one of "🎲", "🎯", "🏀", "⚽", "🎳", or "🎰". Dice can have values 1-6 for "🎲", "🎯" and "🎳", values 1-5 for "🏀" and "⚽", and values 1-64 for "🎰". Defaults to "🎲"
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent message from forwarding
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :param reply_markup: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message
        :rtype: Message
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if emoji is not None:
            args["emoji"] = emoji
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        if isinstance(
            reply_markup,
            (
                InlineKeyboardMarkup,
                ReplyKeyboardMarkup,
                ReplyKeyboardRemove,
                ForceReply,
            ),
        ):
            args["reply_markup"] = dump_json(
                self._retort.dump(
                    reply_markup,
                    InlineKeyboardMarkup
                    | ReplyKeyboardMarkup
                    | ReplyKeyboardRemove
                    | ForceReply,
                )
            )
        return self._retort.load(
            await self._session.call_method("sendDice", args), Message
        )

    async def send_chat_action(
        self,
        chat_id: int | str,
        action: str,
        message_thread_id: int | None = None,
    ) -> bool:
        """Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success.
        We only recommend using this method when a response from the bot will take a noticeable amount of time to arrive.

        Source: https://core.telegram.org/bots/api#sendchataction

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread; supergroups only
        :param action: Type of action to broadcast. Choose one, depending on what the user is about to receive: typing for text messages, upload_photo for photos, record_video or upload_video for videos, record_voice or upload_voice for voice notes, upload_document for general files, choose_sticker for stickers, find_location for location data, record_video_note or upload_video_note for video notes.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id, "action": action}
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        return self._retort.load(
            await self._session.call_method("sendChatAction", args), bool
        )

    async def get_user_profile_photos(
        self,
        user_id: int,
        offset: int | None = None,
        limit: int | None = None,
    ) -> UserProfilePhotos:
        """Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object.

        Source: https://core.telegram.org/bots/api#getuserprofilephotos

        :param user_id: Unique identifier of the target user
        :param offset: Sequential number of the first photo to be returned. By default, all photos are returned.
        :param limit: Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: UserProfilePhotos
        :rtype: UserProfilePhotos
        """
        args: dict[str, Any] = {"user_id": user_id}
        if offset is not None:
            args["offset"] = offset
        if limit is not None:
            args["limit"] = limit
        return self._retort.load(
            await self._session.call_method("getUserProfilePhotos", args),
            UserProfilePhotos,
        )

    async def get_file(
        self,
        file_id: str,
    ) -> File:
        """Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>, where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again.
        Note: This function may not preserve the original file name and MIME type. You should save the file's MIME type and name (if available) when the File object is received.

        Source: https://core.telegram.org/bots/api#getfile

        :param file_id: File identifier to get information about
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: File
        :rtype: File
        """
        args: dict[str, Any] = {"file_id": file_id}
        return self._retort.load(await self._session.call_method("getFile", args), File)

    async def ban_chat_member(
        self,
        chat_id: int | str,
        user_id: int,
        until_date: int | None = None,
        revoke_messages: bool | None = None,
    ) -> bool:
        """Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.

        Source: https://core.telegram.org/bots/api#banchatmember

        :param chat_id: Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername)
        :param user_id: Unique identifier of the target user
        :param until_date: Date when the user will be unbanned; Unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only.
        :param revoke_messages: Pass True to delete all messages from the chat for the user that is being removed. If False, the user will be able to see messages in the group that were sent before the user was removed. Always True for supergroups and channels.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id, "user_id": user_id}
        if until_date is not None:
            args["until_date"] = until_date
        if revoke_messages is not None:
            args["revoke_messages"] = revoke_messages
        return self._retort.load(
            await self._session.call_method("banChatMember", args), bool
        )

    async def unban_chat_member(
        self,
        chat_id: int | str,
        user_id: int,
        only_if_banned: bool | None = None,
    ) -> bool:
        """Use this method to unban a previously banned user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be removed from the chat. If you don't want this, use the parameter only_if_banned. Returns True on success.

        Source: https://core.telegram.org/bots/api#unbanchatmember

        :param chat_id: Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername)
        :param user_id: Unique identifier of the target user
        :param only_if_banned: Do nothing if the user is not banned
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id, "user_id": user_id}
        if only_if_banned is not None:
            args["only_if_banned"] = only_if_banned
        return self._retort.load(
            await self._session.call_method("unbanChatMember", args), bool
        )

    async def restrict_chat_member(
        self,
        chat_id: int | str,
        user_id: int,
        permissions: ChatPermissions,
        use_independent_chat_permissions: bool | None = None,
        until_date: int | None = None,
    ) -> bool:
        """Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass True for all permissions to lift restrictions from a user. Returns True on success.

        Source: https://core.telegram.org/bots/api#restrictchatmember

        :param chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
        :param user_id: Unique identifier of the target user
        :param permissions: A JSON-serialized object for new user permissions
        :param use_independent_chat_permissions: Pass True if chat permissions are set independently. Otherwise, the can_send_other_messages and can_add_web_page_previews permissions will imply the can_send_messages, can_send_audios, can_send_documents, can_send_photos, can_send_videos, can_send_video_notes, and can_send_voice_notes permissions; the can_send_polls permission will imply the can_send_messages permission.
        :param until_date: Date when restrictions will be lifted for the user; Unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id, "user_id": user_id}
        if permissions is not None:
            args["permissions"] = dump_json(
                self._retort.dump(permissions, ChatPermissions)
            )
        if use_independent_chat_permissions is not None:
            args["use_independent_chat_permissions"] = use_independent_chat_permissions
        if until_date is not None:
            args["until_date"] = until_date
        return self._retort.load(
            await self._session.call_method("restrictChatMember", args), bool
        )

    async def promote_chat_member(
        self,
        chat_id: int | str,
        user_id: int,
        is_anonymous: bool | None = None,
        can_manage_chat: bool | None = None,
        can_delete_messages: bool | None = None,
        can_manage_video_chats: bool | None = None,
        can_restrict_members: bool | None = None,
        can_promote_members: bool | None = None,
        can_change_info: bool | None = None,
        can_invite_users: bool | None = None,
        can_post_messages: bool | None = None,
        can_edit_messages: bool | None = None,
        can_pin_messages: bool | None = None,
        can_post_stories: bool | None = None,
        can_edit_stories: bool | None = None,
        can_delete_stories: bool | None = None,
        can_manage_topics: bool | None = None,
    ) -> bool:
        """Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass False for all boolean parameters to demote a user. Returns True on success.

        Source: https://core.telegram.org/bots/api#promotechatmember

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param user_id: Unique identifier of the target user
        :param is_anonymous: Pass True if the administrator's presence in the chat is hidden
        :param can_manage_chat: Pass True if the administrator can access the chat event log, boost list in channels, see channel members, report spam messages, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege
        :param can_delete_messages: Pass True if the administrator can delete messages of other users
        :param can_manage_video_chats: Pass True if the administrator can manage video chats
        :param can_restrict_members: Pass True if the administrator can restrict, ban or unban chat members, or access supergroup statistics
        :param can_promote_members: Pass True if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by him)
        :param can_change_info: Pass True if the administrator can change chat title, photo and other settings
        :param can_invite_users: Pass True if the administrator can invite new users to the chat
        :param can_post_messages: Pass True if the administrator can post messages in the channel, or access channel statistics; channels only
        :param can_edit_messages: Pass True if the administrator can edit messages of other users and can pin messages; channels only
        :param can_pin_messages: Pass True if the administrator can pin messages, supergroups only
        :param can_post_stories: Pass True if the administrator can post stories in the channel; channels only
        :param can_edit_stories: Pass True if the administrator can edit stories posted by other users; channels only
        :param can_delete_stories: Pass True if the administrator can delete stories posted by other users; channels only
        :param can_manage_topics: Pass True if the user is allowed to create, rename, close, and reopen forum topics, supergroups only
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id, "user_id": user_id}
        if is_anonymous is not None:
            args["is_anonymous"] = is_anonymous
        if can_manage_chat is not None:
            args["can_manage_chat"] = can_manage_chat
        if can_delete_messages is not None:
            args["can_delete_messages"] = can_delete_messages
        if can_manage_video_chats is not None:
            args["can_manage_video_chats"] = can_manage_video_chats
        if can_restrict_members is not None:
            args["can_restrict_members"] = can_restrict_members
        if can_promote_members is not None:
            args["can_promote_members"] = can_promote_members
        if can_change_info is not None:
            args["can_change_info"] = can_change_info
        if can_invite_users is not None:
            args["can_invite_users"] = can_invite_users
        if can_post_messages is not None:
            args["can_post_messages"] = can_post_messages
        if can_edit_messages is not None:
            args["can_edit_messages"] = can_edit_messages
        if can_pin_messages is not None:
            args["can_pin_messages"] = can_pin_messages
        if can_post_stories is not None:
            args["can_post_stories"] = can_post_stories
        if can_edit_stories is not None:
            args["can_edit_stories"] = can_edit_stories
        if can_delete_stories is not None:
            args["can_delete_stories"] = can_delete_stories
        if can_manage_topics is not None:
            args["can_manage_topics"] = can_manage_topics
        return self._retort.load(
            await self._session.call_method("promoteChatMember", args), bool
        )

    async def set_chat_administrator_custom_title(
        self,
        chat_id: int | str,
        user_id: int,
        custom_title: str,
    ) -> bool:
        """Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success.

        Source: https://core.telegram.org/bots/api#setchatadministratorcustomtitle

        :param chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
        :param user_id: Unique identifier of the target user
        :param custom_title: New custom title for the administrator; 0-16 characters, emoji are not allowed
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {
            "chat_id": chat_id,
            "user_id": user_id,
            "custom_title": custom_title,
        }
        return self._retort.load(
            await self._session.call_method("setChatAdministratorCustomTitle", args),
            bool,
        )

    async def ban_chat_sender_chat(
        self,
        chat_id: int | str,
        sender_chat_id: int,
    ) -> bool:
        """Use this method to ban a channel chat in a supergroup or a channel. Until the chat is unbanned, the owner of the banned chat won't be able to send messages on behalf of any of their channels. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns True on success.

        Source: https://core.telegram.org/bots/api#banchatsenderchat

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param sender_chat_id: Unique identifier of the target sender chat
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id, "sender_chat_id": sender_chat_id}
        return self._retort.load(
            await self._session.call_method("banChatSenderChat", args), bool
        )

    async def unban_chat_sender_chat(
        self,
        chat_id: int | str,
        sender_chat_id: int,
    ) -> bool:
        """Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns True on success.

        Source: https://core.telegram.org/bots/api#unbanchatsenderchat

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param sender_chat_id: Unique identifier of the target sender chat
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id, "sender_chat_id": sender_chat_id}
        return self._retort.load(
            await self._session.call_method("unbanChatSenderChat", args), bool
        )

    async def set_chat_permissions(
        self,
        chat_id: int | str,
        permissions: ChatPermissions,
        use_independent_chat_permissions: bool | None = None,
    ) -> bool:
        """Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members administrator rights. Returns True on success.

        Source: https://core.telegram.org/bots/api#setchatpermissions

        :param chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
        :param permissions: A JSON-serialized object for new default chat permissions
        :param use_independent_chat_permissions: Pass True if chat permissions are set independently. Otherwise, the can_send_other_messages and can_add_web_page_previews permissions will imply the can_send_messages, can_send_audios, can_send_documents, can_send_photos, can_send_videos, can_send_video_notes, and can_send_voice_notes permissions; the can_send_polls permission will imply the can_send_messages permission.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        if permissions is not None:
            args["permissions"] = dump_json(
                self._retort.dump(permissions, ChatPermissions)
            )
        if use_independent_chat_permissions is not None:
            args["use_independent_chat_permissions"] = use_independent_chat_permissions
        return self._retort.load(
            await self._session.call_method("setChatPermissions", args), bool
        )

    async def export_chat_invite_link(
        self,
        chat_id: int | str,
    ) -> str:
        """Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the new invite link as String on success.

        Source: https://core.telegram.org/bots/api#exportchatinvitelink

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: String
        :rtype: str
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        return self._retort.load(
            await self._session.call_method("exportChatInviteLink", args), str
        )

    async def create_chat_invite_link(
        self,
        chat_id: int | str,
        name: str | None = None,
        expire_date: int | None = None,
        member_limit: int | None = None,
        creates_join_request: bool | None = None,
    ) -> ChatInviteLink:
        """Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object.

        Source: https://core.telegram.org/bots/api#createchatinvitelink

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param name: Invite link name; 0-32 characters
        :param expire_date: Point in time (Unix timestamp) when the link will expire
        :param member_limit: The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
        :param creates_join_request: True, if users joining the chat via the link need to be approved by chat administrators. If True, member_limit can't be specified
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: ChatInviteLink
        :rtype: ChatInviteLink
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        if name is not None:
            args["name"] = name
        if expire_date is not None:
            args["expire_date"] = expire_date
        if member_limit is not None:
            args["member_limit"] = member_limit
        if creates_join_request is not None:
            args["creates_join_request"] = creates_join_request
        return self._retort.load(
            await self._session.call_method("createChatInviteLink", args),
            ChatInviteLink,
        )

    async def edit_chat_invite_link(
        self,
        chat_id: int | str,
        invite_link: str,
        name: str | None = None,
        expire_date: int | None = None,
        member_limit: int | None = None,
        creates_join_request: bool | None = None,
    ) -> ChatInviteLink:
        """Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a ChatInviteLink object.

        Source: https://core.telegram.org/bots/api#editchatinvitelink

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param invite_link: The invite link to edit
        :param name: Invite link name; 0-32 characters
        :param expire_date: Point in time (Unix timestamp) when the link will expire
        :param member_limit: The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
        :param creates_join_request: True, if users joining the chat via the link need to be approved by chat administrators. If True, member_limit can't be specified
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: ChatInviteLink
        :rtype: ChatInviteLink
        """
        args: dict[str, Any] = {"chat_id": chat_id, "invite_link": invite_link}
        if name is not None:
            args["name"] = name
        if expire_date is not None:
            args["expire_date"] = expire_date
        if member_limit is not None:
            args["member_limit"] = member_limit
        if creates_join_request is not None:
            args["creates_join_request"] = creates_join_request
        return self._retort.load(
            await self._session.call_method("editChatInviteLink", args), ChatInviteLink
        )

    async def revoke_chat_invite_link(
        self,
        chat_id: int | str,
        invite_link: str,
    ) -> ChatInviteLink:
        """Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as ChatInviteLink object.

        Source: https://core.telegram.org/bots/api#revokechatinvitelink

        :param chat_id: Unique identifier of the target chat or username of the target channel (in the format @channelusername)
        :param invite_link: The invite link to revoke
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: ChatInviteLink
        :rtype: ChatInviteLink
        """
        args: dict[str, Any] = {"chat_id": chat_id, "invite_link": invite_link}
        return self._retort.load(
            await self._session.call_method("revokeChatInviteLink", args),
            ChatInviteLink,
        )

    async def approve_chat_join_request(
        self,
        chat_id: int | str,
        user_id: int,
    ) -> bool:
        """Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success.

        Source: https://core.telegram.org/bots/api#approvechatjoinrequest

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param user_id: Unique identifier of the target user
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id, "user_id": user_id}
        return self._retort.load(
            await self._session.call_method("approveChatJoinRequest", args), bool
        )

    async def decline_chat_join_request(
        self,
        chat_id: int | str,
        user_id: int,
    ) -> bool:
        """Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success.

        Source: https://core.telegram.org/bots/api#declinechatjoinrequest

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param user_id: Unique identifier of the target user
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id, "user_id": user_id}
        return self._retort.load(
            await self._session.call_method("declineChatJoinRequest", args), bool
        )

    async def set_chat_photo(
        self,
        chat_id: int | str,
        photo: BinaryIO,
    ) -> bool:
        """Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.

        Source: https://core.telegram.org/bots/api#setchatphoto

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param photo: New chat photo, uploaded using multipart/form-data
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        files: dict[str, IOBase] = {}
        if isinstance(photo, IOBase):
            files["photo"] = photo
        return self._retort.load(
            await self._session.call_method("setChatPhoto", args), bool
        )

    async def delete_chat_photo(
        self,
        chat_id: int | str,
    ) -> bool:
        """Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.

        Source: https://core.telegram.org/bots/api#deletechatphoto

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        return self._retort.load(
            await self._session.call_method("deleteChatPhoto", args), bool
        )

    async def set_chat_title(
        self,
        chat_id: int | str,
        title: str,
    ) -> bool:
        """Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.

        Source: https://core.telegram.org/bots/api#setchattitle

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param title: New chat title, 1-128 characters
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id, "title": title}
        return self._retort.load(
            await self._session.call_method("setChatTitle", args), bool
        )

    async def set_chat_description(
        self,
        chat_id: int | str,
        description: str | None = None,
    ) -> bool:
        """Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.

        Source: https://core.telegram.org/bots/api#setchatdescription

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param description: New chat description, 0-255 characters
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        if description is not None:
            args["description"] = description
        return self._retort.load(
            await self._session.call_method("setChatDescription", args), bool
        )

    async def pin_chat_message(
        self,
        chat_id: int | str,
        message_id: int,
        disable_notification: bool | None = None,
    ) -> bool:
        """Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.

        Source: https://core.telegram.org/bots/api#pinchatmessage

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_id: Identifier of a message to pin
        :param disable_notification: Pass True if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id, "message_id": message_id}
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        return self._retort.load(
            await self._session.call_method("pinChatMessage", args), bool
        )

    async def unpin_chat_message(
        self,
        chat_id: int | str,
        message_id: int | None = None,
    ) -> bool:
        """Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.

        Source: https://core.telegram.org/bots/api#unpinchatmessage

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_id: Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        if message_id is not None:
            args["message_id"] = message_id
        return self._retort.load(
            await self._session.call_method("unpinChatMessage", args), bool
        )

    async def unpin_all_chat_messages(
        self,
        chat_id: int | str,
    ) -> bool:
        """Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.

        Source: https://core.telegram.org/bots/api#unpinallchatmessages

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        return self._retort.load(
            await self._session.call_method("unpinAllChatMessages", args), bool
        )

    async def leave_chat(
        self,
        chat_id: int | str,
    ) -> bool:
        """Use this method for your bot to leave a group, supergroup or channel. Returns True on success.

        Source: https://core.telegram.org/bots/api#leavechat

        :param chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        return self._retort.load(
            await self._session.call_method("leaveChat", args), bool
        )

    async def get_chat(
        self,
        chat_id: int | str,
    ) -> Chat:
        """Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success.

        Source: https://core.telegram.org/bots/api#getchat

        :param chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Chat
        :rtype: Chat
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        return self._retort.load(await self._session.call_method("getChat", args), Chat)

    async def get_chat_administrators(
        self,
        chat_id: int | str,
    ) -> list[ChatMember]:
        """Use this method to get a list of administrators in a chat, which aren't bots. Returns an Array of ChatMember objects.

        Source: https://core.telegram.org/bots/api#getchatadministrators

        :param chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Array of ChatMember
        :rtype: list[ChatMember]
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        return self._retort.load(
            await self._session.call_method("getChatAdministrators", args),
            list[ChatMember],
        )

    async def get_chat_member_count(
        self,
        chat_id: int | str,
    ) -> int:
        """Use this method to get the number of members in a chat. Returns Int on success.

        Source: https://core.telegram.org/bots/api#getchatmembercount

        :param chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Integer
        :rtype: int
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        return self._retort.load(
            await self._session.call_method("getChatMemberCount", args), int
        )

    async def get_chat_member(
        self,
        chat_id: int | str,
        user_id: int,
    ) -> ChatMember:
        """Use this method to get information about a member of a chat. The method is only guaranteed to work for other users if the bot is an administrator in the chat. Returns a ChatMember object on success.

        Source: https://core.telegram.org/bots/api#getchatmember

        :param chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
        :param user_id: Unique identifier of the target user
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: ChatMember
        :rtype: ChatMember
        """
        args: dict[str, Any] = {"chat_id": chat_id, "user_id": user_id}
        return self._retort.load(
            await self._session.call_method("getChatMember", args), ChatMember
        )

    async def set_chat_sticker_set(
        self,
        chat_id: int | str,
        sticker_set_name: str,
    ) -> bool:
        """Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.

        Source: https://core.telegram.org/bots/api#setchatstickerset

        :param chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
        :param sticker_set_name: Name of the sticker set to be set as the group sticker set
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {
            "chat_id": chat_id,
            "sticker_set_name": sticker_set_name,
        }
        return self._retort.load(
            await self._session.call_method("setChatStickerSet", args), bool
        )

    async def delete_chat_sticker_set(
        self,
        chat_id: int | str,
    ) -> bool:
        """Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.

        Source: https://core.telegram.org/bots/api#deletechatstickerset

        :param chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        return self._retort.load(
            await self._session.call_method("deleteChatStickerSet", args), bool
        )

    async def get_forum_topic_icon_stickers(
        self,
    ) -> list[Sticker]:
        """Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns an Array of Sticker objects.

        Source: https://core.telegram.org/bots/api#getforumtopiciconstickers


        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Array of Sticker
        :rtype: list[Sticker]
        """
        args: dict[str, Any] = {}
        return self._retort.load(
            await self._session.call_method("getForumTopicIconStickers", args),
            list[Sticker],
        )

    async def create_forum_topic(
        self,
        chat_id: int | str,
        name: str,
        icon_color: int | None = None,
        icon_custom_emoji_id: str | None = None,
    ) -> ForumTopic:
        """Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns information about the created topic as a ForumTopic object.

        Source: https://core.telegram.org/bots/api#createforumtopic

        :param chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
        :param name: Topic name, 1-128 characters
        :param icon_color: Color of the topic icon in RGB format. Currently, must be one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E), 13338331 (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 16478047 (0xFB6F5F)
        :param icon_custom_emoji_id: Unique identifier of the custom emoji shown as the topic icon. Use getForumTopicIconStickers to get all allowed custom emoji identifiers.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: ForumTopic
        :rtype: ForumTopic
        """
        args: dict[str, Any] = {"chat_id": chat_id, "name": name}
        if icon_color is not None:
            args["icon_color"] = icon_color
        if icon_custom_emoji_id is not None:
            args["icon_custom_emoji_id"] = icon_custom_emoji_id
        return self._retort.load(
            await self._session.call_method("createForumTopic", args), ForumTopic
        )

    async def edit_forum_topic(
        self,
        chat_id: int | str,
        message_thread_id: int,
        name: str | None = None,
        icon_custom_emoji_id: str | None = None,
    ) -> bool:
        """Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.

        Source: https://core.telegram.org/bots/api#editforumtopic

        :param chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
        :param message_thread_id: Unique identifier for the target message thread of the forum topic
        :param name: New topic name, 0-128 characters. If not specified or empty, the current name of the topic will be kept
        :param icon_custom_emoji_id: New unique identifier of the custom emoji shown as the topic icon. Use getForumTopicIconStickers to get all allowed custom emoji identifiers. Pass an empty string to remove the icon. If not specified, the current icon will be kept
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
        }
        if name is not None:
            args["name"] = name
        if icon_custom_emoji_id is not None:
            args["icon_custom_emoji_id"] = icon_custom_emoji_id
        return self._retort.load(
            await self._session.call_method("editForumTopic", args), bool
        )

    async def close_forum_topic(
        self,
        chat_id: int | str,
        message_thread_id: int,
    ) -> bool:
        """Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.

        Source: https://core.telegram.org/bots/api#closeforumtopic

        :param chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
        :param message_thread_id: Unique identifier for the target message thread of the forum topic
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
        }
        return self._retort.load(
            await self._session.call_method("closeForumTopic", args), bool
        )

    async def reopen_forum_topic(
        self,
        chat_id: int | str,
        message_thread_id: int,
    ) -> bool:
        """Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.

        Source: https://core.telegram.org/bots/api#reopenforumtopic

        :param chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
        :param message_thread_id: Unique identifier for the target message thread of the forum topic
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
        }
        return self._retort.load(
            await self._session.call_method("reopenForumTopic", args), bool
        )

    async def delete_forum_topic(
        self,
        chat_id: int | str,
        message_thread_id: int,
    ) -> bool:
        """Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights. Returns True on success.

        Source: https://core.telegram.org/bots/api#deleteforumtopic

        :param chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
        :param message_thread_id: Unique identifier for the target message thread of the forum topic
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
        }
        return self._retort.load(
            await self._session.call_method("deleteForumTopic", args), bool
        )

    async def unpin_all_forum_topic_messages(
        self,
        chat_id: int | str,
        message_thread_id: int,
    ) -> bool:
        """Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.

        Source: https://core.telegram.org/bots/api#unpinallforumtopicmessages

        :param chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
        :param message_thread_id: Unique identifier for the target message thread of the forum topic
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
        }
        return self._retort.load(
            await self._session.call_method("unpinAllForumTopicMessages", args), bool
        )

    async def edit_general_forum_topic(
        self,
        chat_id: int | str,
        name: str,
    ) -> bool:
        """Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights. Returns True on success.

        Source: https://core.telegram.org/bots/api#editgeneralforumtopic

        :param chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
        :param name: New topic name, 1-128 characters
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id, "name": name}
        return self._retort.load(
            await self._session.call_method("editGeneralForumTopic", args), bool
        )

    async def close_general_forum_topic(
        self,
        chat_id: int | str,
    ) -> bool:
        """Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.

        Source: https://core.telegram.org/bots/api#closegeneralforumtopic

        :param chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        return self._retort.load(
            await self._session.call_method("closeGeneralForumTopic", args), bool
        )

    async def reopen_general_forum_topic(
        self,
        chat_id: int | str,
    ) -> bool:
        """Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically unhidden if it was hidden. Returns True on success.

        Source: https://core.telegram.org/bots/api#reopengeneralforumtopic

        :param chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        return self._retort.load(
            await self._session.call_method("reopenGeneralForumTopic", args), bool
        )

    async def hide_general_forum_topic(
        self,
        chat_id: int | str,
    ) -> bool:
        """Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically closed if it was open. Returns True on success.

        Source: https://core.telegram.org/bots/api#hidegeneralforumtopic

        :param chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        return self._retort.load(
            await self._session.call_method("hideGeneralForumTopic", args), bool
        )

    async def unhide_general_forum_topic(
        self,
        chat_id: int | str,
    ) -> bool:
        """Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.

        Source: https://core.telegram.org/bots/api#unhidegeneralforumtopic

        :param chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        return self._retort.load(
            await self._session.call_method("unhideGeneralForumTopic", args), bool
        )

    async def unpin_all_general_forum_topic_messages(
        self,
        chat_id: int | str,
    ) -> bool:
        """Use this method to clear the list of pinned messages in a General forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.

        Source: https://core.telegram.org/bots/api#unpinallgeneralforumtopicmessages

        :param chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        return self._retort.load(
            await self._session.call_method("unpinAllGeneralForumTopicMessages", args),
            bool,
        )

    async def answer_callback_query(
        self,
        callback_query_id: str,
        text: str | None = None,
        show_alert: bool | None = None,
        url: str | None = None,
        cache_time: int | None = None,
    ) -> bool:
        """Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.

        Source: https://core.telegram.org/bots/api#answercallbackquery

        :param callback_query_id: Unique identifier for the query to be answered
        :param text: Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
        :param show_alert: If True, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to false.
        :param url: URL that will be opened by the user's client. If you have created a Game and accepted the conditions via @BotFather, specify the URL that opens your game - note that this will only work if the query comes from a callback_game button. Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter.
        :param cache_time: The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"callback_query_id": callback_query_id}
        if text is not None:
            args["text"] = text
        if show_alert is not None:
            args["show_alert"] = show_alert
        if url is not None:
            args["url"] = url
        if cache_time is not None:
            args["cache_time"] = cache_time
        return self._retort.load(
            await self._session.call_method("answerCallbackQuery", args), bool
        )

    async def set_my_commands(
        self,
        commands: list[BotCommand],
        scope: BotCommandScope | None = None,
        language_code: str | None = None,
    ) -> bool:
        """Use this method to change the list of the bot's commands. See this manual for more details about bot commands. Returns True on success.

        Source: https://core.telegram.org/bots/api#setmycommands

        :param commands: A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
        :param scope: A JSON-serialized object, describing scope of users for which the commands are relevant. Defaults to BotCommandScopeDefault.
        :param language_code: A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {}
        if commands is not None:
            args["commands"] = dump_json(self._retort.dump(commands, list[BotCommand]))
        if scope is not None:
            args["scope"] = dump_json(self._retort.dump(scope, BotCommandScope))
        if language_code is not None:
            args["language_code"] = language_code
        return self._retort.load(
            await self._session.call_method("setMyCommands", args), bool
        )

    async def delete_my_commands(
        self,
        scope: BotCommandScope | None = None,
        language_code: str | None = None,
    ) -> bool:
        """Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Returns True on success.

        Source: https://core.telegram.org/bots/api#deletemycommands

        :param scope: A JSON-serialized object, describing scope of users for which the commands are relevant. Defaults to BotCommandScopeDefault.
        :param language_code: A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {}
        if scope is not None:
            args["scope"] = dump_json(self._retort.dump(scope, BotCommandScope))
        if language_code is not None:
            args["language_code"] = language_code
        return self._retort.load(
            await self._session.call_method("deleteMyCommands", args), bool
        )

    async def get_my_commands(
        self,
        scope: BotCommandScope | None = None,
        language_code: str | None = None,
    ) -> list[BotCommand]:
        """Use this method to get the current list of the bot's commands for the given scope and user language. Returns an Array of BotCommand objects. If commands aren't set, an empty list is returned.

        Source: https://core.telegram.org/bots/api#getmycommands

        :param scope: A JSON-serialized object, describing scope of users. Defaults to BotCommandScopeDefault.
        :param language_code: A two-letter ISO 639-1 language code or an empty string
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Array of BotCommand
        :rtype: list[BotCommand]
        """
        args: dict[str, Any] = {}
        if scope is not None:
            args["scope"] = dump_json(self._retort.dump(scope, BotCommandScope))
        if language_code is not None:
            args["language_code"] = language_code
        return self._retort.load(
            await self._session.call_method("getMyCommands", args), list[BotCommand]
        )

    async def set_my_name(
        self,
        name: str | None = None,
        language_code: str | None = None,
    ) -> bool:
        """Use this method to change the bot's name. Returns True on success.

        Source: https://core.telegram.org/bots/api#setmyname

        :param name: New bot name; 0-64 characters. Pass an empty string to remove the dedicated name for the given language.
        :param language_code: A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose language there is no dedicated name.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {}
        if name is not None:
            args["name"] = name
        if language_code is not None:
            args["language_code"] = language_code
        return self._retort.load(
            await self._session.call_method("setMyName", args), bool
        )

    async def get_my_name(
        self,
        language_code: str | None = None,
    ) -> BotName:
        """Use this method to get the current bot name for the given user language. Returns BotName on success.

        Source: https://core.telegram.org/bots/api#getmyname

        :param language_code: A two-letter ISO 639-1 language code or an empty string
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: BotName
        :rtype: BotName
        """
        args: dict[str, Any] = {}
        if language_code is not None:
            args["language_code"] = language_code
        return self._retort.load(
            await self._session.call_method("getMyName", args), BotName
        )

    async def set_my_description(
        self,
        description: str | None = None,
        language_code: str | None = None,
    ) -> bool:
        """Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty. Returns True on success.

        Source: https://core.telegram.org/bots/api#setmydescription

        :param description: New bot description; 0-512 characters. Pass an empty string to remove the dedicated description for the given language.
        :param language_code: A two-letter ISO 639-1 language code. If empty, the description will be applied to all users for whose language there is no dedicated description.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {}
        if description is not None:
            args["description"] = description
        if language_code is not None:
            args["language_code"] = language_code
        return self._retort.load(
            await self._session.call_method("setMyDescription", args), bool
        )

    async def get_my_description(
        self,
        language_code: str | None = None,
    ) -> BotDescription:
        """Use this method to get the current bot description for the given user language. Returns BotDescription on success.

        Source: https://core.telegram.org/bots/api#getmydescription

        :param language_code: A two-letter ISO 639-1 language code or an empty string
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: BotDescription
        :rtype: BotDescription
        """
        args: dict[str, Any] = {}
        if language_code is not None:
            args["language_code"] = language_code
        return self._retort.load(
            await self._session.call_method("getMyDescription", args), BotDescription
        )

    async def set_my_short_description(
        self,
        short_description: str | None = None,
        language_code: str | None = None,
    ) -> bool:
        """Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot. Returns True on success.

        Source: https://core.telegram.org/bots/api#setmyshortdescription

        :param short_description: New short description for the bot; 0-120 characters. Pass an empty string to remove the dedicated short description for the given language.
        :param language_code: A two-letter ISO 639-1 language code. If empty, the short description will be applied to all users for whose language there is no dedicated short description.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {}
        if short_description is not None:
            args["short_description"] = short_description
        if language_code is not None:
            args["language_code"] = language_code
        return self._retort.load(
            await self._session.call_method("setMyShortDescription", args), bool
        )

    async def get_my_short_description(
        self,
        language_code: str | None = None,
    ) -> BotShortDescription:
        """Use this method to get the current bot short description for the given user language. Returns BotShortDescription on success.

        Source: https://core.telegram.org/bots/api#getmyshortdescription

        :param language_code: A two-letter ISO 639-1 language code or an empty string
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: BotShortDescription
        :rtype: BotShortDescription
        """
        args: dict[str, Any] = {}
        if language_code is not None:
            args["language_code"] = language_code
        return self._retort.load(
            await self._session.call_method("getMyShortDescription", args),
            BotShortDescription,
        )

    async def set_chat_menu_button(
        self,
        chat_id: int | None = None,
        menu_button: MenuButton | None = None,
    ) -> bool:
        """Use this method to change the bot's menu button in a private chat, or the default menu button. Returns True on success.

        Source: https://core.telegram.org/bots/api#setchatmenubutton

        :param chat_id: Unique identifier for the target private chat. If not specified, default bot's menu button will be changed
        :param menu_button: A JSON-serialized object for the bot's new menu button. Defaults to MenuButtonDefault
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {}
        if chat_id is not None:
            args["chat_id"] = chat_id
        if menu_button is not None:
            args["menu_button"] = dump_json(self._retort.dump(menu_button, MenuButton))
        return self._retort.load(
            await self._session.call_method("setChatMenuButton", args), bool
        )

    async def get_chat_menu_button(
        self,
        chat_id: int | None = None,
    ) -> MenuButton:
        """Use this method to get the current value of the bot's menu button in a private chat, or the default menu button. Returns MenuButton on success.

        Source: https://core.telegram.org/bots/api#getchatmenubutton

        :param chat_id: Unique identifier for the target private chat. If not specified, default bot's menu button will be returned
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: MenuButton
        :rtype: MenuButton
        """
        args: dict[str, Any] = {}
        if chat_id is not None:
            args["chat_id"] = chat_id
        return self._retort.load(
            await self._session.call_method("getChatMenuButton", args), MenuButton
        )

    async def set_my_default_administrator_rights(
        self,
        rights: ChatAdministratorRights | None = None,
        for_channels: bool | None = None,
    ) -> bool:
        """Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot. Returns True on success.

        Source: https://core.telegram.org/bots/api#setmydefaultadministratorrights

        :param rights: A JSON-serialized object describing new default administrator rights. If not specified, the default administrator rights will be cleared.
        :param for_channels: Pass True to change the default administrator rights of the bot in channels. Otherwise, the default administrator rights of the bot for groups and supergroups will be changed.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {}
        if rights is not None:
            args["rights"] = dump_json(
                self._retort.dump(rights, ChatAdministratorRights)
            )
        if for_channels is not None:
            args["for_channels"] = for_channels
        return self._retort.load(
            await self._session.call_method("setMyDefaultAdministratorRights", args),
            bool,
        )

    async def get_my_default_administrator_rights(
        self,
        for_channels: bool | None = None,
    ) -> ChatAdministratorRights:
        """Use this method to get the current default administrator rights of the bot. Returns ChatAdministratorRights on success.

        Source: https://core.telegram.org/bots/api#getmydefaultadministratorrights

        :param for_channels: Pass True to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: ChatAdministratorRights
        :rtype: ChatAdministratorRights
        """
        args: dict[str, Any] = {}
        if for_channels is not None:
            args["for_channels"] = for_channels
        return self._retort.load(
            await self._session.call_method("getMyDefaultAdministratorRights", args),
            ChatAdministratorRights,
        )

    async def edit_message_text(
        self,
        text: str,
        chat_id: int | str | None = None,
        message_id: int | None = None,
        inline_message_id: str | None = None,
        parse_mode: str | None = None,
        entities: list[MessageEntity] | None = None,
        disable_web_page_preview: bool | None = None,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Message | bool:
        """Use this method to edit text and game messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.

        Source: https://core.telegram.org/bots/api#editmessagetext

        :param chat_id: Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_id: Required if inline_message_id is not specified. Identifier of the message to edit
        :param inline_message_id: Required if chat_id and message_id are not specified. Identifier of the inline message
        :param text: New text of the message, 1-4096 characters after entities parsing
        :param parse_mode: Mode for parsing entities in the message text. See formatting options for more details.
        :param entities: A JSON-serialized list of special entities that appear in message text, which can be specified instead of parse_mode
        :param disable_web_page_preview: Disables link previews for links in this message
        :param reply_markup: A JSON-serialized object for an inline keyboard.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message | Boolean
        :rtype: Message | bool
        """
        args: dict[str, Any] = {"text": text}
        if chat_id is not None:
            args["chat_id"] = chat_id
        if message_id is not None:
            args["message_id"] = message_id
        if inline_message_id is not None:
            args["inline_message_id"] = inline_message_id
        if parse_mode is not None:
            args["parse_mode"] = parse_mode
        if entities is not None:
            args["entities"] = dump_json(
                self._retort.dump(entities, list[MessageEntity])
            )
        if disable_web_page_preview is not None:
            args["disable_web_page_preview"] = disable_web_page_preview
        if reply_markup is not None:
            args["reply_markup"] = dump_json(
                self._retort.dump(reply_markup, InlineKeyboardMarkup)
            )
        return self._retort.load(
            await self._session.call_method("editMessageText", args), Message | bool
        )

    async def edit_message_caption(
        self,
        chat_id: int | str | None = None,
        message_id: int | None = None,
        inline_message_id: str | None = None,
        caption: str | None = None,
        parse_mode: str | None = None,
        caption_entities: list[MessageEntity] | None = None,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Message | bool:
        """Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.

        Source: https://core.telegram.org/bots/api#editmessagecaption

        :param chat_id: Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_id: Required if inline_message_id is not specified. Identifier of the message to edit
        :param inline_message_id: Required if chat_id and message_id are not specified. Identifier of the inline message
        :param caption: New caption of the message, 0-1024 characters after entities parsing
        :param parse_mode: Mode for parsing entities in the message caption. See formatting options for more details.
        :param caption_entities: A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
        :param reply_markup: A JSON-serialized object for an inline keyboard.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message | Boolean
        :rtype: Message | bool
        """
        args: dict[str, Any] = {}
        if chat_id is not None:
            args["chat_id"] = chat_id
        if message_id is not None:
            args["message_id"] = message_id
        if inline_message_id is not None:
            args["inline_message_id"] = inline_message_id
        if caption is not None:
            args["caption"] = caption
        if parse_mode is not None:
            args["parse_mode"] = parse_mode
        if caption_entities is not None:
            args["caption_entities"] = dump_json(
                self._retort.dump(caption_entities, list[MessageEntity])
            )
        if reply_markup is not None:
            args["reply_markup"] = dump_json(
                self._retort.dump(reply_markup, InlineKeyboardMarkup)
            )
        return self._retort.load(
            await self._session.call_method("editMessageCaption", args), Message | bool
        )

    async def edit_message_media(
        self,
        media: InputMedia,
        chat_id: int | str | None = None,
        message_id: int | None = None,
        inline_message_id: str | None = None,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Message | bool:
        """Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its file_id or specify a URL. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.

        Source: https://core.telegram.org/bots/api#editmessagemedia

        :param chat_id: Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_id: Required if inline_message_id is not specified. Identifier of the message to edit
        :param inline_message_id: Required if chat_id and message_id are not specified. Identifier of the inline message
        :param media: A JSON-serialized object for a new media content of the message
        :param reply_markup: A JSON-serialized object for a new inline keyboard.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message | Boolean
        :rtype: Message | bool
        """
        args: dict[str, Any] = {}
        if chat_id is not None:
            args["chat_id"] = chat_id
        if message_id is not None:
            args["message_id"] = message_id
        if inline_message_id is not None:
            args["inline_message_id"] = inline_message_id
        if media is not None:
            args["media"] = dump_json(self._retort.dump(media, InputMedia))
        if reply_markup is not None:
            args["reply_markup"] = dump_json(
                self._retort.dump(reply_markup, InlineKeyboardMarkup)
            )
        return self._retort.load(
            await self._session.call_method("editMessageMedia", args), Message | bool
        )

    async def edit_message_live_location(
        self,
        latitude: float,
        longitude: float,
        chat_id: int | str | None = None,
        message_id: int | None = None,
        inline_message_id: str | None = None,
        horizontal_accuracy: float | None = None,
        heading: int | None = None,
        proximity_alert_radius: int | None = None,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Message | bool:
        """Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.

        Source: https://core.telegram.org/bots/api#editmessagelivelocation

        :param chat_id: Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_id: Required if inline_message_id is not specified. Identifier of the message to edit
        :param inline_message_id: Required if chat_id and message_id are not specified. Identifier of the inline message
        :param latitude: Latitude of new location
        :param longitude: Longitude of new location
        :param horizontal_accuracy: The radius of uncertainty for the location, measured in meters; 0-1500
        :param heading: Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
        :param proximity_alert_radius: The maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
        :param reply_markup: A JSON-serialized object for a new inline keyboard.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message | Boolean
        :rtype: Message | bool
        """
        args: dict[str, Any] = {"latitude": latitude, "longitude": longitude}
        if chat_id is not None:
            args["chat_id"] = chat_id
        if message_id is not None:
            args["message_id"] = message_id
        if inline_message_id is not None:
            args["inline_message_id"] = inline_message_id
        if horizontal_accuracy is not None:
            args["horizontal_accuracy"] = horizontal_accuracy
        if heading is not None:
            args["heading"] = heading
        if proximity_alert_radius is not None:
            args["proximity_alert_radius"] = proximity_alert_radius
        if reply_markup is not None:
            args["reply_markup"] = dump_json(
                self._retort.dump(reply_markup, InlineKeyboardMarkup)
            )
        return self._retort.load(
            await self._session.call_method("editMessageLiveLocation", args),
            Message | bool,
        )

    async def stop_message_live_location(
        self,
        chat_id: int | str | None = None,
        message_id: int | None = None,
        inline_message_id: str | None = None,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Message | bool:
        """Use this method to stop updating a live location message before live_period expires. On success, if the message is not an inline message, the edited Message is returned, otherwise True is returned.

        Source: https://core.telegram.org/bots/api#stopmessagelivelocation

        :param chat_id: Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_id: Required if inline_message_id is not specified. Identifier of the message with live location to stop
        :param inline_message_id: Required if chat_id and message_id are not specified. Identifier of the inline message
        :param reply_markup: A JSON-serialized object for a new inline keyboard.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message | Boolean
        :rtype: Message | bool
        """
        args: dict[str, Any] = {}
        if chat_id is not None:
            args["chat_id"] = chat_id
        if message_id is not None:
            args["message_id"] = message_id
        if inline_message_id is not None:
            args["inline_message_id"] = inline_message_id
        if reply_markup is not None:
            args["reply_markup"] = dump_json(
                self._retort.dump(reply_markup, InlineKeyboardMarkup)
            )
        return self._retort.load(
            await self._session.call_method("stopMessageLiveLocation", args),
            Message | bool,
        )

    async def edit_message_reply_markup(
        self,
        chat_id: int | str | None = None,
        message_id: int | None = None,
        inline_message_id: str | None = None,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Message | bool:
        """Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.

        Source: https://core.telegram.org/bots/api#editmessagereplymarkup

        :param chat_id: Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_id: Required if inline_message_id is not specified. Identifier of the message to edit
        :param inline_message_id: Required if chat_id and message_id are not specified. Identifier of the inline message
        :param reply_markup: A JSON-serialized object for an inline keyboard.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message | Boolean
        :rtype: Message | bool
        """
        args: dict[str, Any] = {}
        if chat_id is not None:
            args["chat_id"] = chat_id
        if message_id is not None:
            args["message_id"] = message_id
        if inline_message_id is not None:
            args["inline_message_id"] = inline_message_id
        if reply_markup is not None:
            args["reply_markup"] = dump_json(
                self._retort.dump(reply_markup, InlineKeyboardMarkup)
            )
        return self._retort.load(
            await self._session.call_method("editMessageReplyMarkup", args),
            Message | bool,
        )

    async def stop_poll(
        self,
        chat_id: int | str,
        message_id: int,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Poll:
        """Use this method to stop a poll which was sent by the bot. On success, the stopped Poll is returned.

        Source: https://core.telegram.org/bots/api#stoppoll

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_id: Identifier of the original message with the poll
        :param reply_markup: A JSON-serialized object for a new message inline keyboard.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Poll
        :rtype: Poll
        """
        args: dict[str, Any] = {"chat_id": chat_id, "message_id": message_id}
        if reply_markup is not None:
            args["reply_markup"] = dump_json(
                self._retort.dump(reply_markup, InlineKeyboardMarkup)
            )
        return self._retort.load(
            await self._session.call_method("stopPoll", args), Poll
        )

    async def delete_message(
        self,
        chat_id: int | str,
        message_id: int,
    ) -> bool:
        """Use this method to delete a message, including service messages, with the following limitations:
        - A message can only be deleted if it was sent less than 48 hours ago.
        - Service messages about a supergroup, channel, or forum topic creation can't be deleted.
        - A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.
        - Bots can delete outgoing messages in private chats, groups, and supergroups.
        - Bots can delete incoming messages in private chats.
        - Bots granted can_post_messages permissions can delete outgoing messages in channels.
        - If the bot is an administrator of a group, it can delete any message there.
        - If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there.
        Returns True on success.

        Source: https://core.telegram.org/bots/api#deletemessage

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_id: Identifier of the message to delete
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"chat_id": chat_id, "message_id": message_id}
        return self._retort.load(
            await self._session.call_method("deleteMessage", args), bool
        )

    async def send_sticker(
        self,
        chat_id: int | str,
        sticker: BinaryIO | str,
        message_thread_id: int | None = None,
        emoji: str | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
        reply_markup: InlineKeyboardMarkup
        | ReplyKeyboardMarkup
        | ReplyKeyboardRemove
        | ForceReply
        | None = None,
    ) -> Message:
        """Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers. On success, the sent Message is returned.

        Source: https://core.telegram.org/bots/api#sendsticker

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param sticker: Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP sticker from the Internet, or upload a new .WEBP or .TGS sticker using multipart/form-data. More information on Sending Files: https://core.telegram.org/bots/api#sending-files. Video stickers can only be sent by a file_id. Animated stickers can't be sent via an HTTP URL.
        :param emoji: Emoji associated with the sticker; only for just uploaded stickers
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent message from forwarding and saving
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :param reply_markup: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message
        :rtype: Message
        """
        args: dict[str, Any] = {"chat_id": chat_id}
        files: dict[str, IOBase] = {}
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if isinstance(sticker, IOBase):
            files["sticker"] = sticker
        if emoji is not None:
            args["emoji"] = emoji
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        if isinstance(
            reply_markup,
            (
                InlineKeyboardMarkup,
                ReplyKeyboardMarkup,
                ReplyKeyboardRemove,
                ForceReply,
            ),
        ):
            args["reply_markup"] = dump_json(
                self._retort.dump(
                    reply_markup,
                    InlineKeyboardMarkup
                    | ReplyKeyboardMarkup
                    | ReplyKeyboardRemove
                    | ForceReply,
                )
            )
        return self._retort.load(
            await self._session.call_method("sendSticker", args), Message
        )

    async def get_sticker_set(
        self,
        name: str,
    ) -> StickerSet:
        """Use this method to get a sticker set. On success, a StickerSet object is returned.

        Source: https://core.telegram.org/bots/api#getstickerset

        :param name: Name of the sticker set
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: StickerSet
        :rtype: StickerSet
        """
        args: dict[str, Any] = {"name": name}
        return self._retort.load(
            await self._session.call_method("getStickerSet", args), StickerSet
        )

    async def get_custom_emoji_stickers(
        self,
        custom_emoji_ids: list[str],
    ) -> list[Sticker]:
        """Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of Sticker objects.

        Source: https://core.telegram.org/bots/api#getcustomemojistickers

        :param custom_emoji_ids: List of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Array of Sticker
        :rtype: list[Sticker]
        """
        args: dict[str, Any] = {}
        if custom_emoji_ids is not None:
            args["custom_emoji_ids"] = dump_json(
                self._retort.dump(custom_emoji_ids, list[str])
            )
        return self._retort.load(
            await self._session.call_method("getCustomEmojiStickers", args),
            list[Sticker],
        )

    async def upload_sticker_file(
        self,
        user_id: int,
        sticker: BinaryIO,
        sticker_format: str,
    ) -> File:
        """Use this method to upload a file with a sticker for later use in the createNewStickerSet and addStickerToSet methods (the file can be used multiple times). Returns the uploaded File on success.

        Source: https://core.telegram.org/bots/api#uploadstickerfile

        :param user_id: User identifier of sticker file owner
        :param sticker: A file with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. See https://core.telegram.org/stickers for technical requirements. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
        :param sticker_format: Format of the sticker, must be one of "static", "animated", "video"
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: File
        :rtype: File
        """
        args: dict[str, Any] = {"user_id": user_id, "sticker_format": sticker_format}
        files: dict[str, IOBase] = {}
        if isinstance(sticker, IOBase):
            files["sticker"] = sticker
        return self._retort.load(
            await self._session.call_method("uploadStickerFile", args), File
        )

    async def create_new_sticker_set(
        self,
        user_id: int,
        name: str,
        title: str,
        stickers: list[InputSticker],
        sticker_format: str,
        sticker_type: str | None = None,
        needs_repainting: bool | None = None,
    ) -> bool:
        """Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. Returns True on success.

        Source: https://core.telegram.org/bots/api#createnewstickerset

        :param user_id: User identifier of created sticker set owner
        :param name: Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals). Can contain only English letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in "_by_<bot_username>". <bot_username> is case insensitive. 1-64 characters.
        :param title: Sticker set title, 1-64 characters
        :param stickers: A JSON-serialized list of 1-50 initial stickers to be added to the sticker set
        :param sticker_format: Format of stickers in the set, must be one of "static", "animated", "video"
        :param sticker_type: Type of stickers in the set, pass "regular", "mask", or "custom_emoji". By default, a regular sticker set is created.
        :param needs_repainting: Pass True if stickers in the sticker set must be repainted to the color of text when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context; for custom emoji sticker sets only
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {
            "user_id": user_id,
            "name": name,
            "title": title,
            "sticker_format": sticker_format,
        }
        if stickers is not None:
            args["stickers"] = dump_json(
                self._retort.dump(stickers, list[InputSticker])
            )
        if sticker_type is not None:
            args["sticker_type"] = sticker_type
        if needs_repainting is not None:
            args["needs_repainting"] = needs_repainting
        return self._retort.load(
            await self._session.call_method("createNewStickerSet", args), bool
        )

    async def add_sticker_to_set(
        self,
        user_id: int,
        name: str,
        sticker: InputSticker,
    ) -> bool:
        """Use this method to add a new sticker to a set created by the bot. The format of the added sticker must match the format of the other stickers in the set. Emoji sticker sets can have up to 200 stickers. Animated and video sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns True on success.

        Source: https://core.telegram.org/bots/api#addstickertoset

        :param user_id: User identifier of sticker set owner
        :param name: Sticker set name
        :param sticker: A JSON-serialized object with information about the added sticker. If exactly the same sticker had already been added to the set, then the set isn't changed.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"user_id": user_id, "name": name}
        if sticker is not None:
            args["sticker"] = dump_json(self._retort.dump(sticker, InputSticker))
        return self._retort.load(
            await self._session.call_method("addStickerToSet", args), bool
        )

    async def set_sticker_position_in_set(
        self,
        sticker: str,
        position: int,
    ) -> bool:
        """Use this method to move a sticker in a set created by the bot to a specific position. Returns True on success.

        Source: https://core.telegram.org/bots/api#setstickerpositioninset

        :param sticker: File identifier of the sticker
        :param position: New sticker position in the set, zero-based
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"sticker": sticker, "position": position}
        return self._retort.load(
            await self._session.call_method("setStickerPositionInSet", args), bool
        )

    async def delete_sticker_from_set(
        self,
        sticker: str,
    ) -> bool:
        """Use this method to delete a sticker from a set created by the bot. Returns True on success.

        Source: https://core.telegram.org/bots/api#deletestickerfromset

        :param sticker: File identifier of the sticker
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"sticker": sticker}
        return self._retort.load(
            await self._session.call_method("deleteStickerFromSet", args), bool
        )

    async def set_sticker_emoji_list(
        self,
        sticker: str,
        emoji_list: list[str],
    ) -> bool:
        """Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success.

        Source: https://core.telegram.org/bots/api#setstickeremojilist

        :param sticker: File identifier of the sticker
        :param emoji_list: A JSON-serialized list of 1-20 emoji associated with the sticker
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"sticker": sticker}
        if emoji_list is not None:
            args["emoji_list"] = dump_json(self._retort.dump(emoji_list, list[str]))
        return self._retort.load(
            await self._session.call_method("setStickerEmojiList", args), bool
        )

    async def set_sticker_keywords(
        self,
        sticker: str,
        keywords: list[str] | None = None,
    ) -> bool:
        """Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success.

        Source: https://core.telegram.org/bots/api#setstickerkeywords

        :param sticker: File identifier of the sticker
        :param keywords: A JSON-serialized list of 0-20 search keywords for the sticker with total length of up to 64 characters
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"sticker": sticker}
        if keywords is not None:
            args["keywords"] = dump_json(self._retort.dump(keywords, list[str]))
        return self._retort.load(
            await self._session.call_method("setStickerKeywords", args), bool
        )

    async def set_sticker_mask_position(
        self,
        sticker: str,
        mask_position: MaskPosition | None = None,
    ) -> bool:
        """Use this method to change the mask position of a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns True on success.

        Source: https://core.telegram.org/bots/api#setstickermaskposition

        :param sticker: File identifier of the sticker
        :param mask_position: A JSON-serialized object with the position where the mask should be placed on faces. Omit the parameter to remove the mask position.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"sticker": sticker}
        if mask_position is not None:
            args["mask_position"] = dump_json(
                self._retort.dump(mask_position, MaskPosition)
            )
        return self._retort.load(
            await self._session.call_method("setStickerMaskPosition", args), bool
        )

    async def set_sticker_set_title(
        self,
        name: str,
        title: str,
    ) -> bool:
        """Use this method to set the title of a created sticker set. Returns True on success.

        Source: https://core.telegram.org/bots/api#setstickersettitle

        :param name: Sticker set name
        :param title: Sticker set title, 1-64 characters
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"name": name, "title": title}
        return self._retort.load(
            await self._session.call_method("setStickerSetTitle", args), bool
        )

    async def set_sticker_set_thumbnail(
        self,
        name: str,
        user_id: int,
        thumbnail: BinaryIO | str | None = None,
    ) -> bool:
        """Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set. Returns True on success.

        Source: https://core.telegram.org/bots/api#setstickersetthumbnail

        :param name: Sticker set name
        :param user_id: User identifier of the sticker set owner
        :param thumbnail: A .WEBP or .PNG image with the thumbnail, must be up to 128 kilobytes in size and have a width and height of exactly 100px, or a .TGS animation with a thumbnail up to 32 kilobytes in size (see https://core.telegram.org/stickers#animated-sticker-requirements for animated sticker technical requirements), or a WEBM video with the thumbnail up to 32 kilobytes in size; see https://core.telegram.org/stickers#video-sticker-requirements for video sticker technical requirements. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files: https://core.telegram.org/bots/api#sending-files. Animated and video sticker set thumbnails can't be uploaded via HTTP URL. If omitted, then the thumbnail is dropped and the first sticker is used as the thumbnail.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"name": name, "user_id": user_id}
        files: dict[str, IOBase] = {}
        if isinstance(thumbnail, IOBase):
            files["thumbnail"] = thumbnail
        return self._retort.load(
            await self._session.call_method("setStickerSetThumbnail", args), bool
        )

    async def set_custom_emoji_sticker_set_thumbnail(
        self,
        name: str,
        custom_emoji_id: str | None = None,
    ) -> bool:
        """Use this method to set the thumbnail of a custom emoji sticker set. Returns True on success.

        Source: https://core.telegram.org/bots/api#setcustomemojistickersetthumbnail

        :param name: Sticker set name
        :param custom_emoji_id: Custom emoji identifier of a sticker from the sticker set; pass an empty string to drop the thumbnail and use the first sticker as the thumbnail.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"name": name}
        if custom_emoji_id is not None:
            args["custom_emoji_id"] = custom_emoji_id
        return self._retort.load(
            await self._session.call_method("setCustomEmojiStickerSetThumbnail", args),
            bool,
        )

    async def delete_sticker_set(
        self,
        name: str,
    ) -> bool:
        """Use this method to delete a sticker set that was created by the bot. Returns True on success.

        Source: https://core.telegram.org/bots/api#deletestickerset

        :param name: Sticker set name
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"name": name}
        return self._retort.load(
            await self._session.call_method("deleteStickerSet", args), bool
        )

    async def answer_inline_query(
        self,
        inline_query_id: str,
        results: list[InlineQueryResult],
        cache_time: int | None = None,
        is_personal: bool | None = None,
        next_offset: str | None = None,
        button: InlineQueryResultsButton | None = None,
    ) -> bool:
        """Use this method to send answers to an inline query. On success, True is returned.
        No more than 50 results per query are allowed.

        Source: https://core.telegram.org/bots/api#answerinlinequery

        :param inline_query_id: Unique identifier for the answered query
        :param results: A JSON-serialized array of results for the inline query
        :param cache_time: The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
        :param is_personal: Pass True if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query.
        :param next_offset: Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
        :param button: A JSON-serialized object describing a button to be shown above inline query results
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"inline_query_id": inline_query_id}
        if results is not None:
            args["results"] = dump_json(
                self._retort.dump(results, list[InlineQueryResult])
            )
        if cache_time is not None:
            args["cache_time"] = cache_time
        if is_personal is not None:
            args["is_personal"] = is_personal
        if next_offset is not None:
            args["next_offset"] = next_offset
        if button is not None:
            args["button"] = dump_json(
                self._retort.dump(button, InlineQueryResultsButton)
            )
        return self._retort.load(
            await self._session.call_method("answerInlineQuery", args), bool
        )

    async def answer_web_app_query(
        self,
        web_app_query_id: str,
        result: InlineQueryResult,
    ) -> SentWebAppMessage:
        """Use this method to set the result of an interaction with a Web App and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a SentWebAppMessage object is returned.

        Source: https://core.telegram.org/bots/api#answerwebappquery

        :param web_app_query_id: Unique identifier for the query to be answered
        :param result: A JSON-serialized object describing the message to be sent
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: SentWebAppMessage
        :rtype: SentWebAppMessage
        """
        args: dict[str, Any] = {"web_app_query_id": web_app_query_id}
        if result is not None:
            args["result"] = dump_json(self._retort.dump(result, InlineQueryResult))
        return self._retort.load(
            await self._session.call_method("answerWebAppQuery", args),
            SentWebAppMessage,
        )

    async def send_invoice(
        self,
        chat_id: int | str,
        title: str,
        description: str,
        payload: str,
        provider_token: str,
        currency: str,
        prices: list[LabeledPrice],
        message_thread_id: int | None = None,
        max_tip_amount: int | None = None,
        suggested_tip_amounts: list[int] | None = None,
        start_parameter: str | None = None,
        provider_data: str | None = None,
        photo_url: str | None = None,
        photo_size: int | None = None,
        photo_width: int | None = None,
        photo_height: int | None = None,
        need_name: bool | None = None,
        need_phone_number: bool | None = None,
        need_email: bool | None = None,
        need_shipping_address: bool | None = None,
        send_phone_number_to_provider: bool | None = None,
        send_email_to_provider: bool | None = None,
        is_flexible: bool | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Message:
        """Use this method to send invoices. On success, the sent Message is returned.

        Source: https://core.telegram.org/bots/api#sendinvoice

        :param chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param title: Product name, 1-32 characters
        :param description: Product description, 1-255 characters
        :param payload: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
        :param provider_token: Payment provider token, obtained via @BotFather
        :param currency: Three-letter ISO 4217 currency code, see more on currencies
        :param prices: Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
        :param max_tip_amount: The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0
        :param suggested_tip_amounts: A JSON-serialized array of suggested amounts of tips in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount.
        :param start_parameter: Unique deep-linking parameter. If left empty, forwarded copies of the sent message will have a Pay button, allowing multiple users to pay directly from the forwarded message, using the same invoice. If non-empty, forwarded copies of the sent message will have a URL button with a deep link to the bot (instead of a Pay button), with the value used as the start parameter
        :param provider_data: JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
        :param photo_url: URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
        :param photo_size: Photo size in bytes
        :param photo_width: Photo width
        :param photo_height: Photo height
        :param need_name: Pass True if you require the user's full name to complete the order
        :param need_phone_number: Pass True if you require the user's phone number to complete the order
        :param need_email: Pass True if you require the user's email address to complete the order
        :param need_shipping_address: Pass True if you require the user's shipping address to complete the order
        :param send_phone_number_to_provider: Pass True if the user's phone number should be sent to provider
        :param send_email_to_provider: Pass True if the user's email address should be sent to provider
        :param is_flexible: Pass True if the final price depends on the shipping method
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent message from forwarding and saving
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :param reply_markup: A JSON-serialized object for an inline keyboard. If empty, one 'Pay total price' button will be shown. If not empty, the first button must be a Pay button.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message
        :rtype: Message
        """
        args: dict[str, Any] = {
            "chat_id": chat_id,
            "title": title,
            "description": description,
            "payload": payload,
            "provider_token": provider_token,
            "currency": currency,
        }
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if prices is not None:
            args["prices"] = dump_json(self._retort.dump(prices, list[LabeledPrice]))
        if max_tip_amount is not None:
            args["max_tip_amount"] = max_tip_amount
        if suggested_tip_amounts is not None:
            args["suggested_tip_amounts"] = dump_json(
                self._retort.dump(suggested_tip_amounts, list[int])
            )
        if start_parameter is not None:
            args["start_parameter"] = start_parameter
        if provider_data is not None:
            args["provider_data"] = provider_data
        if photo_url is not None:
            args["photo_url"] = photo_url
        if photo_size is not None:
            args["photo_size"] = photo_size
        if photo_width is not None:
            args["photo_width"] = photo_width
        if photo_height is not None:
            args["photo_height"] = photo_height
        if need_name is not None:
            args["need_name"] = need_name
        if need_phone_number is not None:
            args["need_phone_number"] = need_phone_number
        if need_email is not None:
            args["need_email"] = need_email
        if need_shipping_address is not None:
            args["need_shipping_address"] = need_shipping_address
        if send_phone_number_to_provider is not None:
            args["send_phone_number_to_provider"] = send_phone_number_to_provider
        if send_email_to_provider is not None:
            args["send_email_to_provider"] = send_email_to_provider
        if is_flexible is not None:
            args["is_flexible"] = is_flexible
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        if reply_markup is not None:
            args["reply_markup"] = dump_json(
                self._retort.dump(reply_markup, InlineKeyboardMarkup)
            )
        return self._retort.load(
            await self._session.call_method("sendInvoice", args), Message
        )

    async def create_invoice_link(
        self,
        title: str,
        description: str,
        payload: str,
        provider_token: str,
        currency: str,
        prices: list[LabeledPrice],
        max_tip_amount: int | None = None,
        suggested_tip_amounts: list[int] | None = None,
        provider_data: str | None = None,
        photo_url: str | None = None,
        photo_size: int | None = None,
        photo_width: int | None = None,
        photo_height: int | None = None,
        need_name: bool | None = None,
        need_phone_number: bool | None = None,
        need_email: bool | None = None,
        need_shipping_address: bool | None = None,
        send_phone_number_to_provider: bool | None = None,
        send_email_to_provider: bool | None = None,
        is_flexible: bool | None = None,
    ) -> str:
        """Use this method to create a link for an invoice. Returns the created invoice link as String on success.

        Source: https://core.telegram.org/bots/api#createinvoicelink

        :param title: Product name, 1-32 characters
        :param description: Product description, 1-255 characters
        :param payload: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
        :param provider_token: Payment provider token, obtained via BotFather
        :param currency: Three-letter ISO 4217 currency code, see more on currencies
        :param prices: Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
        :param max_tip_amount: The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0
        :param suggested_tip_amounts: A JSON-serialized array of suggested amounts of tips in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount.
        :param provider_data: JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
        :param photo_url: URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.
        :param photo_size: Photo size in bytes
        :param photo_width: Photo width
        :param photo_height: Photo height
        :param need_name: Pass True if you require the user's full name to complete the order
        :param need_phone_number: Pass True if you require the user's phone number to complete the order
        :param need_email: Pass True if you require the user's email address to complete the order
        :param need_shipping_address: Pass True if you require the user's shipping address to complete the order
        :param send_phone_number_to_provider: Pass True if the user's phone number should be sent to the provider
        :param send_email_to_provider: Pass True if the user's email address should be sent to the provider
        :param is_flexible: Pass True if the final price depends on the shipping method
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: String
        :rtype: str
        """
        args: dict[str, Any] = {
            "title": title,
            "description": description,
            "payload": payload,
            "provider_token": provider_token,
            "currency": currency,
        }
        if prices is not None:
            args["prices"] = dump_json(self._retort.dump(prices, list[LabeledPrice]))
        if max_tip_amount is not None:
            args["max_tip_amount"] = max_tip_amount
        if suggested_tip_amounts is not None:
            args["suggested_tip_amounts"] = dump_json(
                self._retort.dump(suggested_tip_amounts, list[int])
            )
        if provider_data is not None:
            args["provider_data"] = provider_data
        if photo_url is not None:
            args["photo_url"] = photo_url
        if photo_size is not None:
            args["photo_size"] = photo_size
        if photo_width is not None:
            args["photo_width"] = photo_width
        if photo_height is not None:
            args["photo_height"] = photo_height
        if need_name is not None:
            args["need_name"] = need_name
        if need_phone_number is not None:
            args["need_phone_number"] = need_phone_number
        if need_email is not None:
            args["need_email"] = need_email
        if need_shipping_address is not None:
            args["need_shipping_address"] = need_shipping_address
        if send_phone_number_to_provider is not None:
            args["send_phone_number_to_provider"] = send_phone_number_to_provider
        if send_email_to_provider is not None:
            args["send_email_to_provider"] = send_email_to_provider
        if is_flexible is not None:
            args["is_flexible"] = is_flexible
        return self._retort.load(
            await self._session.call_method("createInvoiceLink", args), str
        )

    async def answer_shipping_query(
        self,
        shipping_query_id: str,
        ok: bool,
        shipping_options: list[ShippingOption] | None = None,
        error_message: str | None = None,
    ) -> bool:
        """If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Bot API will send an Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, True is returned.

        Source: https://core.telegram.org/bots/api#answershippingquery

        :param shipping_query_id: Unique identifier for the query to be answered
        :param ok: Pass True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
        :param shipping_options: Required if ok is True. A JSON-serialized array of available shipping options.
        :param error_message: Required if ok is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"shipping_query_id": shipping_query_id, "ok": ok}
        if shipping_options is not None:
            args["shipping_options"] = dump_json(
                self._retort.dump(shipping_options, list[ShippingOption])
            )
        if error_message is not None:
            args["error_message"] = error_message
        return self._retort.load(
            await self._session.call_method("answerShippingQuery", args), bool
        )

    async def answer_pre_checkout_query(
        self,
        pre_checkout_query_id: str,
        ok: bool,
        error_message: str | None = None,
    ) -> bool:
        """Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, True is returned. Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.

        Source: https://core.telegram.org/bots/api#answerprecheckoutquery

        :param pre_checkout_query_id: Unique identifier for the query to be answered
        :param ok: Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use False if there are any problems.
        :param error_message: Required if ok is False. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {
            "pre_checkout_query_id": pre_checkout_query_id,
            "ok": ok,
        }
        if error_message is not None:
            args["error_message"] = error_message
        return self._retort.load(
            await self._session.call_method("answerPreCheckoutQuery", args), bool
        )

    async def set_passport_data_errors(
        self,
        user_id: int,
        errors: list[PassportElementError],
    ) -> bool:
        """Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success.
        Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.

        Source: https://core.telegram.org/bots/api#setpassportdataerrors

        :param user_id: User identifier
        :param errors: A JSON-serialized array describing the errors
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Boolean
        :rtype: bool
        """
        args: dict[str, Any] = {"user_id": user_id}
        if errors is not None:
            args["errors"] = dump_json(
                self._retort.dump(errors, list[PassportElementError])
            )
        return self._retort.load(
            await self._session.call_method("setPassportDataErrors", args), bool
        )

    async def send_game(
        self,
        chat_id: int,
        game_short_name: str,
        message_thread_id: int | None = None,
        disable_notification: bool | None = None,
        protect_content: bool | None = None,
        reply_to_message_id: int | None = None,
        allow_sending_without_reply: bool | None = None,
        reply_markup: InlineKeyboardMarkup | None = None,
    ) -> Message:
        """Use this method to send a game. On success, the sent Message is returned.

        Source: https://core.telegram.org/bots/api#sendgame

        :param chat_id: Unique identifier for the target chat
        :param message_thread_id: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
        :param game_short_name: Short name of the game, serves as the unique identifier for the game. Set up your games via @BotFather.
        :param disable_notification: Sends the message silently. Users will receive a notification with no sound.
        :param protect_content: Protects the contents of the sent message from forwarding and saving
        :param reply_to_message_id: If the message is a reply, ID of the original message
        :param allow_sending_without_reply: Pass True if the message should be sent even if the specified replied-to message is not found
        :param reply_markup: A JSON-serialized object for an inline keyboard. If empty, one 'Play game_title' button will be shown. If not empty, the first button must launch the game.
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message
        :rtype: Message
        """
        args: dict[str, Any] = {"chat_id": chat_id, "game_short_name": game_short_name}
        if message_thread_id is not None:
            args["message_thread_id"] = message_thread_id
        if disable_notification is not None:
            args["disable_notification"] = disable_notification
        if protect_content is not None:
            args["protect_content"] = protect_content
        if reply_to_message_id is not None:
            args["reply_to_message_id"] = reply_to_message_id
        if allow_sending_without_reply is not None:
            args["allow_sending_without_reply"] = allow_sending_without_reply
        if reply_markup is not None:
            args["reply_markup"] = dump_json(
                self._retort.dump(reply_markup, InlineKeyboardMarkup)
            )
        return self._retort.load(
            await self._session.call_method("sendGame", args), Message
        )

    async def set_game_score(
        self,
        user_id: int,
        score: int,
        force: bool | None = None,
        disable_edit_message: bool | None = None,
        chat_id: int | None = None,
        message_id: int | None = None,
        inline_message_id: str | None = None,
    ) -> Message | bool:
        """Use this method to set the score of the specified user in a game message. On success, if the message is not an inline message, the Message is returned, otherwise True is returned. Returns an error, if the new score is not greater than the user's current score in the chat and force is False.

        Source: https://core.telegram.org/bots/api#setgamescore

        :param user_id: User identifier
        :param score: New score, must be non-negative
        :param force: Pass True if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
        :param disable_edit_message: Pass True if the game message should not be automatically edited to include the current scoreboard
        :param chat_id: Required if inline_message_id is not specified. Unique identifier for the target chat
        :param message_id: Required if inline_message_id is not specified. Identifier of the sent message
        :param inline_message_id: Required if chat_id and message_id are not specified. Identifier of the inline message
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Message | Boolean
        :rtype: Message | bool
        """
        args: dict[str, Any] = {"user_id": user_id, "score": score}
        if force is not None:
            args["force"] = force
        if disable_edit_message is not None:
            args["disable_edit_message"] = disable_edit_message
        if chat_id is not None:
            args["chat_id"] = chat_id
        if message_id is not None:
            args["message_id"] = message_id
        if inline_message_id is not None:
            args["inline_message_id"] = inline_message_id
        return self._retort.load(
            await self._session.call_method("setGameScore", args), Message | bool
        )

    async def get_game_high_scores(
        self,
        user_id: int,
        chat_id: int | None = None,
        message_id: int | None = None,
        inline_message_id: str | None = None,
    ) -> list[GameHighScore]:
        """Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. Returns an Array of GameHighScore objects.

        Source: https://core.telegram.org/bots/api#getgamehighscores

        :param user_id: Target user id
        :param chat_id: Required if inline_message_id is not specified. Unique identifier for the target chat
        :param message_id: Required if inline_message_id is not specified. Identifier of the sent message
        :param inline_message_id: Required if chat_id and message_id are not specified. Identifier of the inline message
        :raises slonogram.exceptions.api.ApiError: If telegram returned an API error
        :return: Array of GameHighScore
        :rtype: list[GameHighScore]
        """
        args: dict[str, Any] = {"user_id": user_id}
        if chat_id is not None:
            args["chat_id"] = chat_id
        if message_id is not None:
            args["message_id"] = message_id
        if inline_message_id is not None:
            args["inline_message_id"] = inline_message_id
        return self._retort.load(
            await self._session.call_method("getGameHighScores", args),
            list[GameHighScore],
        )
